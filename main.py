# from calendar import month
# from itertools import count
# from operator import index
# import json
# ============= 01.03.25==========================================

# типы данных: int - целочисленное значение
# float - вещественные числа указываются через точку (20.5)
# str - строковое значение
# str(age) - преобразование в строку
# int(age) - преобразование в число
# ==========================================

# name = "admin"
# age = 20
# print(name, type(name))
# print(age, type(age))
# print(name + str(age))

# a = 4
# b = 5
# print("a =", a, id(a))
# print("b =", b, id(b))
# a = b
# print("a =", a, id(a))
# print("b =", b, id(b))
# ==========================================


# a = b = c = 5  # множественное присваивание с одним значением
# a, b, c = 5, "Hello", 9.2  # с разными значениями кол-во переменных должно соответствовать кол-ву значений
# print(a)
# print(b)
# print(c)
# ===============================================


# fist_name = "admin" - так правильно называть переменные из нескольких слов
# print(fist_name)
# ===============================================


# import keyword  # посмотреть зарезервированные слова
# print(keyword.kwlist)  # посмотреть зарезервированные слова
# ==================================================


# PI = 3.14 # константа - пишется в верхнем регистре(при этом ее можно поменять, но так делать не красиво)
# ==================================================


# поменять местами значения переменных:
# a = 1
# b = 2
# print("a:", a)
# print("b:", b)
#
# c = a
# a = b
# b = c
# print("a:", a)
# print("b:", b)
#
# a, b = b, a # то же самое только короче
# =============================================================

# сложение и умножение строк:
# s1 = "Hello"
# s2 = "Python"
# s3 = s1 + " " + s2
# print(s3)
# print(s3 * 3)
# =============================================================

# арифметика:

# print(6 + 2)  # сложение
# print(6 - 2)  # вычитание
# print(6 * 2)  # умножение
# print(6 ** 2)  # в степень
# print(7 / 2)   # деление
# print(7 // 2)   # целочисленное деление(откидывает дробь)
# print(7 % 2)   # остаток от деления
# ================================================================

# a, b, c = 5, 7, 3
# res = a + b + c
# print("Сумма:", a + b + c)
# print("Сумма:", res)
# print("произведение:", a * b * c)
# print("среднее арифметическое", (a + b + c) / 3)
# print("среднее арифметическое", res / 3)

# number = (6 + 4) * (5 ** 2 + 7)
# print(number)

# num = 10
# num += 5
# print(num)  # 15
#
# num -= 3
# print(num)  # 12
#
# num *= 4
# print(num)  # 48
# ==========================================

# разворот числа:
# num = 4321
# print("Исходное число:", num)
# a = num % 10
# print(a)
# num = num // 10
# b = num % 10
# num = num // 10
# c = num % 10
# num = num // 10
# d = num % 10
# print("обратное число:", a * 1000 + b * 100 + c * 10 + d)

# то же, но короче:

# num = 4321
# print("Исходное число:", num)
# res = num % 10 * 1000
# num //= 10
# res += num % 10 * 100
# num //= 10
# res += num % 10 * 10
# num //= 10
# res += num % 10
# print("Обратное число:", res)
# ===============================================================

# num1 = "2.5"
# num2 = 3
# # res = int(num1) + num2  # сложит и будет 5
# # res = num1 + str(num2)  # сложит как строку будет 23
# print(res)
# =============================================================

# print(int(2.987))
# print(round(2.587, 2))  # округление математическое, вторая цифра кол-во знаков после точки

# ============= 02.03.25=============================

# name = "Виктор"
# age = 28
# print("Меня зовут " + name + ". Мне " + str(age) + " лет.")
# print("Меня зовут", name, ". Мне ", age, "лет.", sep="___")  # sep="символ" добавит символы между словами переменными
# и числами. end=" " - чтоб новый принт начинался в той же строке. Указываются в конце принта
# print("Новая строка")

# ===============================================

# name = input("Введите имя: ")  # как prompt в JS в скобках вопрос или пояснения возвращает строчное значение
# print("Hello,", name)

# ===================================================

# num = input("Введите число: ")
# power = input("Введите степень: ")
# res = int(num) ** int(power)
# print("Число", num, "в степени", power, "равно:", res)

# ==========================================================
# булевый тип данных=============

# b1 = True # пишутся с большой буквы True или False
# b2 = False
# print(b1 + 5)  # в этом случае True это 1 и будет ответ 6
# print(b2 + 5)  # в этом случае False это 0 и будет ответ 5
#
# print(bool("ыдлв"))  # bool - привести к булевому значению. Если что-то внутри скобки есть это True если нет False

# False выдают: "", 0, 0.0, None, False
# None - тип данных всегда выдает False
# ==================================================================

# операторы сравнения

# print(7 == 7)  # сравнение 7 = 7?? - ответ True или False если не равно
# print(7 != 10)  # 7 не равно 10??
# print(8 > 5)  # 8 больше 5 ??
# print(8 >= 8)  # больше или равно
# print(8 < 5)  # меньше
# print(8 <= 8)  # меньше или равно
# print("hello" > "Hello")  # строки сравниваются по символьному коду первого символа

# print(2 < 4 < 9)  # тут True && True -> True
# print(2 * 5 > 7 >= 4 + 3)  # тут будет: True && True -> True
# print(3 * 3 <= 7 >= 2)  # тут будет: False && True -> False
# ===========================================================================

# print(5 - 3 == 2 and 1 + 3 == 4)  # and - логическое И
# print(5 - 3 == 2 or 1 + 3 == 4)  # or - логическое ИЛИ
# print(not 9 - 7)  # not - логическое отрицание
# ===========================================================================

# условия if, else

# cnt = 5
# if cnt < 10:
#     cnt += 1
# print(cnt)
# =================================================

# age = int(input("Введите возраст: "))
# if age >= 18:
#     print("Доступ разрешен")
#     print("Добро пожаловать")
# else:
#     print("доступ запрещен")

# ===========================================================

# a = 15
# b = 25
#
# if a > b:
#     print("a > b")
# elif b > a:
#     print("b > a")
# else:
#     print("a == b")

# ===============================================================

# a = int(input("Введите первую сторону: "))
# b = int(input("Введите вторую сторону: "))
# c = int(input("Введите третью сторону: "))
# 12
# if a == b == c:
#     print("Треугольник равносторонний")
# elif a == b or b == c or a == c:
#     print("Треугольник равнобедренный")
# else:
#     print("Треугольник разносторонний")

# ================================================================

# day = int(input("Введите день недели (цифрой): "))
# if (day >= 1) and (day <= 5): # или такая запись: 1 <= day <= 5
#     print("Рабочий день - ", end="")
#     if day == 1:
#         print("Понедельник")
#     if day == 2:
#         print("Вторник")
#     if day == 3:
#         print("Среда")
#     if day == 4:
#         print("Четверг")
#     if day == 5:
#         print("Пятница")
# elif day == 6 or day == 7:
#     print("Выходной день - ", end="")
#     if day == 6:
#         print("Суббота")
#     if day == 7:
#         print("Воскресенье")
# else:
#     print("Такого дня не существует")

# ===========================================================

# mon = int(input("Введите номер месяца: "))
# if mon == 12 or mon == 1 or mon == 2:
#     print("Зима")
# if mon == 3 or mon == 4 or mon == 5:
#     print("Весна")
# if mon == 6 or mon == 7 or mon == 8:
#     print("Лето")
# if mon == 9 or mon == 10 or mon == 11:
#     print("Осень")
# else:
#     print("Такого месяца не существует")

# ==============================================================

# n = int(input("Введите количество ворон: "))
# if 0 <= n <= 9:
#     print("На ветке ", end="")
#     if n == 1:
#         print(n, "ворона")
#     elif 2 <= n <= 4:
#         print(n, "вороны")
#     else:
#         print(n, "ворон")
# else:
#     print("Ошибка ввода данных")

# второй вариант: ===================

# n = int(input("Введите количество ворон: "))
# if 0 <= n <= 9:
#     print("На ветке ", end="")
#     if n == 1:
#         print(n, "ворона")
#     if 2 <= n <= 4:
#         print(n, "вороны")
#     if 5 <= n <= 9 or n == 0:
#         print(n, "ворон")
# else:
#     print("Ошибка ввода данных")

# =======================================================================

# новый оператор (мало используется пока до ума не довели)

# password = "user"
#
# match password:
#     case "admin":
#         print("Администратор")
#     case "user":
#         print("Пользователь")
#     case _:
#         print("Пароль неверен")

# ======

# day = "понедельник"
# time = 10
# match day:
#     case "понедельник" | "вторник" | "среда" | "четверг" | "пятница" if 9 <= time <= 12 or 14 <= time <= 17:
#         print("Рабочий день")
#     case "суббота" | "воскресенье":
#         print("Выходной день")
#     case _:
#         print("Такого дня нет или не рабочее время")

# =========================================================================================================

# =========================== 09.03.25==================================


# тернарное выражение - значение if условие else значение (a if a < b else b)

# a, b = 10, 20
# print(a if a < b else b)

# =======

# a, b = 20, 30
# print("a == b" if a == b else "a > b" if a > b else "a < b")

# ==============================================================================

# Исключения - если есть вероятность что пользователь введет не коректные данные нужно сделать так как код ниже
# и код попробует отработать если данные правильные он отработает если нет выдаст сообщение котороя мы записали
# в try пишем код который попробует выполнить
# в except название ошибки и что написать если она возникла


# try:
#     n = int(input("Введите целое число: "))
#     print(n * 2)
# except ValueError:
#     print("Не правильно ввели число")

# =======

# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except ValueError:
#     print("Нельзя вводить строки")
# except ZeroDivisionError:
#     print("Нельзя делить на ноль")

# ==== Или так:
# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):
#     print("Нельзя вводить строки или Нельзя делить на ноль")

# =================================


# try:  # код который попробует выполнить
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):  # перечень ошибок(исключений)
#     print("Нельзя вводить строки или Нельзя делить на ноль")
# else:  # когда в try не возникло исключения
#     print("Все нормально. Вы ввели", n, "и", m)
# finally:  # выполняется в любом случае (Всегда должен быть последним)
#     print("Конец программы")
# ==============


# try:
#     n = input("Введите первое число: ")
#     m = input("Введите второе число: ")
#     print(int(n) + int(m))
# except ValueError:
#     print(n + m)

# ===============

# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
#
# try:
#     n = int(n)
#     m = int(m)
# except ValueError:
#     n = str(n)
# finally:
#     print(n + m)

# ===========================================================================

# Циклы

# while

# i = 0  # переменная счетчик
# while i < 5:  # условие работы цикла (пока i меньше 5 цикл будет повторяться (работать))
#     print("i =", i)
#     i += 1  # изменение счетчика

# ==================
# задача: вывести все четные от 1 до 20
# i = 1
# while i <= 20:
#     if i % 2 == 0:
#         print(i)
#     i += 1
# ==========или так:

# i = 2
# while i <= 20:
#     print(i)
#     i += 2

# =======================================

# задача ввести число и вывести звездочками по числу

# n = int(input("Введите количество символов: "))
# print("*" * n)
#
# # ============= или
#
# i = 0
# while i < n:
#     print("*", end="")
#     i += 1

# ===========================================
# вывести сумму всех нечетных чисел в диапазоне

# a = int(input("Введите начало диапазона: "))
# b = int(input("Введите конец диапазона: "))
# res = 0
# while a <= b:
#     if a % 2:
#         print(a, end=" ")
#         res += a
#     a += 1

# ========================================================
# проверка четное число или нет

# n = input("Введите целое число: ")
#
# while type(n) is not int:  # проверка целое ли число
#     try:
#         n = int(n)
#     except ValueError:
#         print("Число не целое")
#         n = input("Введите целое число: ")
#
# if n % 2 == 0:  # проверка на четность, нечетность
#     print("Четное")
# else:
#     print("Нечетное")

# =============================================================

# break и continue

# i = 0
# while i < 10:
#     if i == 3:
#         i += 1
#         continue
#     print(i, end=" ")
#     if i == 5:
#         break
#     i += 1
# print("\nЦикл завершен!")

# ================================================================

# while True:
#     n = int(input("Введите положительное число: "))
#     if n < 0:
#         break

# ==================================================================

# задача поиск произведения последовательности положительных чисел введенных пользователем

# res = 1
# while True:
#     n = int(input("Введите число: "))
#     if n == 0:
#         break
#     res *= n
#
# print("Результат:", res)

# =============================================================================

# i = 0
# while i < 10:
#     print(i)
#     i += 1
# else:
#     print("Цикл окончен, i =", i)

# ===========================================================================

# i = 1
# while i < 5:
#     print("Внешний цикл: i =", i)
#     j = 1
#     while j < 4:
#         print("\tВнутренний цикл: j=", j)
#         j += 1
#     i += 1

# ==============================================================================

# вывести таблицу умножения


# i = 1
# while i < 10:
#     j = 1
#     while j < 10:
#         print(i, "*", j, "=", i * j, end="\t\t")
#         j += 1
#     print()
#     i += 1

# ========================================================================

# вывести прямоугольник из символов
#
# i = 0
# while i < 3:
#     j = 0
#     while j < 6:
#         print("^ ", end="")
#         j += 1
#     print()
#     i += 1

# ==========================================================================

# вывести прямоугольник из чередующихся символов (строки)


# i = 0
# while i < 5:
#     j = 0
#     while j < 16:
#         if i % 2 == 0:
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1

# =================================================================
# вывести прямоугольник из чередующихся символов (столбцы)

#
# i = 0
# while i < 5:
#     j = 0
#     while j < 16:
#         if j % 2 == 0:
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1

# ========================================================================

# диагональ из звездочек

# i = 0
# while i < 5:
#     j = 0
#     while j < i:
#         print(" ", end="")
#         j += 1
#     print("*")
#     i += 1

# ============== или так:

# i = 0
# while i < 5:
#     print(" " * i, "*", sep="")  # sep что б не было пробела на первой строке
#     i += 1

# ===============================================================

# a = input("Введите количество символов: ")
# while type(a) is not int:
#     try:
#         a = int(a)
#         b = input("Укажите какой символ использовать: ")
#         c = input("укажите ориентацию 0 - горизонтальная; 1 - вертикальная ")
#         while type(c) is not int:
#             try:
#                 c = int(c)
#                 if 0 <= c <= 1:
#                     i = 0
#                     while i <= a:
#                         if c == 0:
#                             print(b)
#                         else:
#                             print(b, end="")
#                         i += 1
#                 else:
#                     print("Не правильное число")
#                     c = input("Введите 0 или 1: ")
#             except ValueError:
#                 print("Не правильное число или не число")
#                 c = input("укажите ориентацию 0 - горизонтальная; 1 - вертикальная ")
#     except ValueError:
#         print("Не правильное число или не число")
#         a = input("Введите количество символов: ")

# ============================================================================================================
# 15.03.2025 ======================================================================================

# for element in collection
#   print(element)

# for i in "Hello", "World":
#     print(i)
# range(start, stop, step) start - начало, stop - конец перебора, step - шаг

# print(range(1, 9, 2))
#
# for i in range(1, 9, 2):
#     print(i, end=" ")
#
#     print()  # одинаковые фор и вайлд
#
# i = 1
# while i < 9:
#     print(i, end=" ")
#     i += 2
# =================================================

# ch = int(input("Введите целое число: "))
# for i in range(1, ch + 1):
#     if ch % i == 0:
#         print(i, end=" ")

# =====================================================
#
# for i in range(10, 100):
#     if i % 11 == 0:
#         print(i, end=" ")
# print()
# # ====== то же самое
# for i in range(11, 100, 11):
#     print(i, end=" ")
# print()

# =======================================================

# for i in range(3):
#     print(i)
#     if i == 1:
#         break
#     else:
#         print("Конец цикла")
# # ==============================================
# for i in range(3):
#     if i == 1:
#         continue
#     print(i)
#
# else:
#     print("Конец цикла")
# ==================================================================
# вложенные циклы

# for i in range(3):
#     print("+++")
#     for j in range(2):
#         print("_____")

# =========================================================

# w = 12
# h = 4
# for i in range(h):
#     for j in range(w):
#         print("*", end="")
#     print()
# =============================================

# w = int(input("Введите ширину прямоугольника: "))
# h = int(input("Введите высоту прямоугольника: "))
# for i in range(h):
#     for j in range(w):
#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:
#             print("*", end="")
#         else:
#             print(" ", end="")
#     print()

# ======================================================
# фор в одну строку
#


# st = [i * 2 for i in "Hello"]
# print(st)
#
# num = [i for i in range(38) if i % 2 == 0]
# print(num)

# ======================================================
# [] - список (list) - изменяемые тип данных. аналогично массиву в JS

# num = [14, 16, 18, 20, 24, 26, 28, "Hello", True, 2.5]
# print(num)
# print(type(num))
# print(num[0])  # обращение по индексу 0 - первый элемент
# print(num[-1])  # обращение по индексу -1 - последний элемент
# print(num[-3])
# num[0] = 256  # изменение элемента
# print(num)
# num[1] += 100
# print(num)
# print(len(num))  # количество элементов
# =================================================================
# # создание пустого списка
# s = []
# print(s, type(s))
# # ========
# s2 = list()  # через list() можно преобразовать элементы в список
# print(s2, type(s2))

# ======================================

# s1 = [1, 2, 3]
# s2 = [4, 5, 6]
# s3 = s1 + s2  # сложение списков
# print(s3)
# print(s3 * 2)  # умножение списка

# =============================================================

# n = list(range(10))  # быстрое создание списка цифр
# print(n)
# n = list(range(2, 10))  # ОТ 2 до 10
# print(n)
# n = list(range(2, 10, 3))  # ОТ 2 до 10 с шагом 3
# print(n)

# ================================================================

# список в одну строку
# [выражение for переменная in последовательность]

# a = [0 for i in range(5)]
# print(a)  # будет [0 0 0 0 0]
#
# a = [i for i in range(5)]
# print(a)  # будет [0 1 2 3 4]
#
# a = [i * 2 for i in range(5)]
# print(a)  # будет [0, 2, 4, 6, 8]
#
# a = [i ** 2 for i in range(5)]
# print(a)  # будет 0, 1, 4, 9, 16]
#
# # += -= и т.д. нельзя использовать
#
# n = 5
# a = [i for i in range(n + 1)]
# print(n)
# print(a)
# ============================================

# a = [0] * int(input("Введите количество элементов списка: "))
# print(a)
# for i in range(len(a)):
#     a[i] = int(input("-> "))
# print(a)

# ===============

# a = [input("-> ") for i in range(int(input("Введите количество элементов списка: ")))]
# print(a)

# ===================================================================

# lst = [5, 6, 7, 8, 9]
#
# for i in range(len(lst)):
#     print(lst[i], end=" ")
#
# print()
#
# for i in lst:
#     print(i, end=" ")

# ================================================================


# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# s = 0
# for i in range(len(a)):
#     if a[i] < 0:
#         s += a[i]
# print("сумма отрицательных элементов:", s)

# =======

# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# s = 0
# for i in a:
#     if i < 0:
#         s += 1
# print("Сумма отрицательных элементов", s)

# ==========================================================================

# n = list(range(21, 41))
# print(n)
# s = 0
# k = 0
# for i in range(len (n)):
#     if i % 2 == 0:
#         s += 1
#     else:
#         k += 1
#
# print("Сумма нечетных элементов:", s)
# print("Сумма четных элементов:", k)

# ============= то же самое

# n = list(range(21, 41))
# print(n)
# s = 0
# k = 0
# for i in n:
#     if i % 2:
#         s += 1
#     else:
#         k += 1
#
# print("Сумма нечетных элементов:", s)
# print("Сумма четных элементов:", k)

# =======================================================================

# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# for i in range(len(a)):
#     if i % 2 == 0:
#         print(a[i], end=" ")

# =============

# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# for i in range(0, len(a), 2):
#     print(a[i], end=" ")

# ==============

# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# for i in a:
#     if i % 2 == 0:
#         print(i, end=" ")

# =======================================================================

# a = [int(input("-> ")) for i in range(int(input("n: ")))]
# print(a)
# for i in range(1, len(a)):
#     if a[i] > a[i - 1]:
#         print(a[i], end=" ")

# ==========================================================================
# срез  список[start:stop:step]

# lst =[5, 6, 7, 8, 9]
# print(lst[1:3])  # от 1 до 3 индекса
# print(lst[1:])  # от 1 до конца
# print(lst[:4])  # от начала до 4
# print(lst[:])  # от начала до конца
# print(lst[::-1])
# print(lst[3:1:-1])

# =================================================================

# lst = list(range(1, 8))
# print(lst)
# print(lst[::-1])  # список в обратную сторону
# print(lst[::2])
# print(lst[1::2])  # от первого индекса до конца каждый второй элемент
# print(lst[0:1])
# print(lst[-1:])
# print(lst[3:4])
# print(lst[4:])
# print(lst[4:1: -1])

# ==================================================================
#  разворот строки в обратную сторону
# st = "HelloWorld"
# print(st[1:5])
# print(st[::-1])

# ===================================================================

# s = [5, 9, 3, 7, 1, 8]
# print(s)
# s[1:3] = [0, 0, 0, 0]
# print(s)
# s[1:2] = [20]  # добавление через срез нужны []
# print(s)
# s[2] = 120  # добавление по индексу скобки не нужны
# print(s)
# s[2] = [120]
# print(s)
# s[10:11] = [200]
# print(s)
# print(len(s))

# ===================================================================

# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# s = 0
# e = len(a)
# for i in range(len(a)):
#     if a[i] > 0:
#         s += a[i]
#     else:
#         e -= 1
# m = s / e
# print("Среднее арифметическое:", m)

# =========================================================================================================
# 15.03.2025 ==================


# Методы списка

# print(dir(list))  # посмотреть все методы у этого типа данных
#
#
# s = [5, 20, 120, 200]
# print(s)
# s.append(99)  # добавляет элемент в конец списка (если несколько добавить будет один список(вложенный))
# print(s)
# s.extend([1, 2, 3])  # несколько элементов в конец списка
# print(s)
# s.insert(0, 100)  # добавление одного элемента по индексу (первое число это индекс)
# print(s)

# ======================
# добавление в конец списка

# lst = []
# n = int(input("кол-во элементов: "))
# for i in range(n):
#     x = int(input("Введите число: "))
#     lst.append(x)
# print(lst)

# ====
# добавление в начало по индексу

# lst = []
# n = int(input("кол-во элементов: "))
# for i in range(n):
#     x = int(input("Введите число: "))
#     lst.insert(0, x)
# print(lst)

# ===================================================
# пересечение элементов в списке (ОБЛАСТЬ ПЕРЕСЕЧЕНИЯ СПИСКОВ) (одинаковые элементы)


# a = [5, 9, 2, 1, 4, 3, 2, 4]
# b = [4, 2, 1, 7, 3, 2]
# c = []

# for i in a:
#     for j in b:
#         if i in c:
#             continue  # что бы не было дубликатов (если есть обинаковые в верхнем списке)
#         if i == j:
#             c.append(i)
#             break  # что бы не было дубликатов (если есть обинаковые в нижнем списке)
# print(c)

# =========== то же самое
# не делает дубликатов  из нижнего списка

# a = [5, 9, 2, 1, 4, 3, 4, 2]
# b = [4, 2, 1, 7, 3, 2]
# c = []
#
# for i in a:
#     if i in b and i not in c:  # что бы не было дубликатов из верхнего списка
#         c.append(i)
# print(c)

# ==========================================================================
# задача: комбинация списка (один элемент из первого списка второй из второго и т.д.)

# a = [1, 2, 3]
# b = [11, 22, 33]
# c = []
# for i in range(len(a)):  # работает потому что мы привязаны к длине списка и длина их равна
#     c.append(a[i])
#     c.append(b[i])
# print(c)
# =====================
# разная длина:
# когда b больше:

# a = [1, 2, 3]
# b = [11, 22, 33, 4, 5]
# c = []
#
# for i in range(len(a)):
#     c.append(a[i])
#     c.append(b[i])
# for i in range(len(a), len(b)):
#     c.append(b[i])
# print(c)
#
# если a больше ====
# a = [1, 2, 3, 4, 5]
# b = [11, 22, 33]
# c = []
#
# if len(b) > len(a):
#     for i in range(len(a)):
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(a), len(b)):
#         c.append(b[i])
#     print(c)
# else:
#     for i in range(len(b)):
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(b), len(a)):
#         c.append(a[i])

# ===============================================
# удаление элементов
#
# s = [5, 20, 120, 200]
# print(s)
# s[1:3] = []  # через срез
# del s[0]  # метод удаления
# del s[1:3]  # через методо со срезом
# s.remove(120)  # удаление (первое вхождение) элемент из списка по значению
#
# num = 3  # проверка если такое значение в списке (что б не было ошибок исключений)
# if num in s:
#     s.remove(num)

# s.pop()  # удаляет последний элемент списка если нет параметра в ()
# s.pop(0)  # удаляет по заданному индексу
# print(s)

# === проверка есть ли такой индекс ============
# try:
#     num = s.pop(9)
#     print(num)
# except IndexError:
#     print(ind, "- такого индекса нет")
# print(s)
# s.clear()  - очистка списка
# =====================================================
# задача:

# print("Введите элементы списка:")
# a = [int(input("->")) for i in range(int(input("n: ")))]
# print(a)
# print("Введите индекс: ")
# k = int(input("k = "))
# try:
#     a.pop(k)
# except IndexError:
#     print("Элемент удалить не удалось.", k, "такого элемента не существует")
# print(a)

# ===============================================================

# s = [5, 20, 120, 200, 120]
# print(s)
#
# num = s.count(20)  # кол-во заданных значений в списке (в скобках () ) ( то есть сколько таких элементов одинаковых)
# print(num)
#
# ind = s.index(20)  # вернет индекс первого вхождения заданного значения (в скобках () )
# print(ind)

# ====================================================================

# a = [1, 2, 3]
# b = a
# print("a =", a)
# print("b =", b)
#
# a.append(20)  # когда делаем изменения в одном списке они также происходят во втором
# print("a =", a)
# print("b =", b)
#
# b.append(200)  # когда делаем изменения в одном списке они также происходят во втором
# print("a =", a)
# print("b =", b)
# ==============================

# a = [1, 2, 3]
# b = a.copy()  # с этим методом изменения не будут влиять на второй список
# print("a =", a)
# print("b =", b)
#
# a.append(20)
# print("a =", a)
# print("b =", b)
#
# b.append(200)
# print("a =", a)
# print("b =", b)
# =======================================================================

# b = [200, 1, 2, 3, 53]
# print(b)
# b.reverse()  # метод разворота
# print(b)
# b.sort(reverse=False)  # сортировка по возрастанию
# print(b)
# b.sort(reverse=True)  # сортировка по убыванию
# print(b)
# s = ["Виталий", "Сергей", "Александр", "Анна"]
# print(s)
# s.sort(key=len)  # сортировка по длине элементов от короткого к длинному
# print(s)
# s.sort(reverse=True, key=len)  # сортировка по длине элементов от длинного к короткому
# print(s)
#
# c = [200, 1, 2, 3, 53]
# print(c)
# lst = sorted(c)  # делает новый список отсортированный
# print(c)
# print(lst)

# ===========================================================================
# генерация случайных данных

# import random  # импортирование модуля, должен находиться вверху

# print(random.random())  # рандомное число
# print(random.randint(0, 9))  # рандомное между 0 и 9
# print(random.randrange(0, 9, 2))  # рандомное между 0 и 9 с шагом 2
# print(random.uniform(10.5, 25.5))  # рандомное вещественное число
# print(round(random.uniform(10.5, 25.5), 2))  # с округелние до 2 символов после запятой
# ======================================================================

# city = ["Москва", "Новосибирск", "Воронеж", "Сочи", "ЕКБ"]
# s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# print(random.choice(city))  # случайное значение
# print(random.choice(s))  # случайное значение
#
# print(random.choices(city, k=3))  # случайное значение 3 штуки
# print(random.choices(s, k=3)) # случайное значение 3 штуки
#
# random.shuffle(city)  # случайно перемешанные значения
# print(city)
# random.shuffle(s)  # случайно перемешанные значения
# print(s)
# ===================================================================

# import random
#
# mas = [random.randint(20, 40) for i in range(10)]
# print(mas)
# ===================================================================

# lst = [7, 4, 6, 12, 14, 13, 9, 15, 3, 5, 2, 11, 10, 8, 1, 16]
# print(lst)
# print(len(lst))  # количество элементов
# print(min(lst))  # минимальное значение, в строках по алфавиту первой буквы
# print(max(lst))  # минимальное значение, в строках по алфавиту первой буквы
# print(sum(lst))  # сумма значений только в числах
# =======================================================================
# задача:


# import random
#
# lst = [random.randint(0, 100) for i in range(10)]
# print(lst)
# max_1 = max(lst)
# print("MAX", max_1)
# lst.remove(max_1)
# lst.insert(0, max_1)
# print(lst)
# ===================================================================
# задача

# import random
#
# lst = [random.randint(0, 100) for i in range(10)]
# print(lst)
# min_1 = min(lst)
# print("MIN =", min_1)
# ind = lst.index(min_1)
# print("INDEX", ind)
# del lst[0:ind]
# print(lst)
# ==================================================================
# задача
# import random
#
# n1 = int(input("Введите размер первого списка: "))
# n2 = int(input("Введите размер второго списка: "))
# a = [random.randint(0, 10) for i in range(n1)]
# b = [random.randint(0, 10) for j in range(n2)]
# print("Первый список: ", a)
# print("второй список: ", b)
# c = a + b
# print("Третий список: ", c)
#
# c = []
# for i in range(len(a)):
#     if a[i] not in c:
#         c.append(a[i])
# for i in range(len(b)):
#     if b[i] not in c:
#         c.append(b[i])

# print("Третий список: ", c)
#
# c = []
# for i in range(len(a)):
#     if a[i] in b and a[i] not in c:
#         c.append(a[i])
# print("Третий список: ", c)

# c = [min(a), min(b), max(a), max(b)]
# print("Третий список: ", c)

# =======================================================
# вложенный список

# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]
# ]
# print(m)
# print(len(m))
# print(m[1][2])  # доступ к 7ке. первая скобка индекс списка вложенного вторая индекс элемента в этом списке
#
# st = ["Hello", "World"]
# print(st[1][4])  # обращение к букве d. первая скобка индекс элемента(слова) вторая индекс буквы в слове

# =======================================================

# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]
# ]
# print(m)
# print("Вариант 1")
# for row in range(len(m)):
#     for col in range(len(m[row])):
#         print(m[row][col], end="\t\t")
#     print()
# # ======== то же самое
# print("Вариант 2")
# for i in m:
#     for j in i:
#         print(j, end="\t\t")
#     print()
# ===============================================================================

# 22.03.25

# modules

# import math  # модуль математических функций
#
# num1 = math.sqrt(2)
# num2 = math.ceil(3.2)
# num3 = math.floor(3.8)
# print(num1)
# print(num2)
# print(num3)
# ==========================================

# import math as m  # псевдоним для импортируемого модуля
#
# num1 = m.sqrt(2)
# num2 = m.ceil(3.2)
# num3 = m.floor(3.8)
# print(num1)
# print(num2)
# print(num3)

# ========================================

# from math import sqrt, ceil, floor  # импотр конкретных методов модуля (что бы сократить размер файла, что б не
# # импортировать все методы модуля)
#
# num1 = sqrt(2)
# num2 = ceil(3.2)
# num3 = floor(3.8)
# print(num1)
# print(num2)
# print(num3)

# ====================================

# from math import *  # импортирует все методы, но не нужно писать math в переменной
#
# num1 = sqrt(2)
# num2 = ceil(3.2)
# num3 = floor(3.8)
# print(num1)
# print(num2)
# print(num3)

# ==========================================

# from math import pi   # число ПИ
# print(pi)
#
# radius = int(input("Введите радиус окружности: "))
# print("Длина окружности:", round(2 * pi * radius))

# ==========================================================

# import time  # модуль даты и времени
# import locale  # модуль языка (локализация)


# print(time.time())  # скок времени с 01.01.1970 в секундах
# print(time.ctime())  # день недели, месяц, дата, врем, год (в скобках можно указать кол-во секунд от 1970 и он выдаст
# # эту дату)
# print(time.localtime())  # локальная дата и время ключами
# res = time.localtime()
# print(res.tm_year)
# print(time.strftime("Today is %B %d, %Y."))  # дата и время по шаблону (%B и т.д.. - это часть шаблона)
# print(time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime(4244314514)))
#
# locale.setlocale(locale.LC_ALL, "ru")  # первый параметр - к чему применять локализацию, второй сама локализация
# #  (если не указать второй параметр он берется из операционки)
# print(time.strftime("Сегодня: %B %d, %Y."))
#  ====================================================================

# pause = 0.5
# print("Программа запущена")
# time.sleep(pause)  # остановка программы через время в скобках
# print(pause, "seconds")

# start = time.time()
# time.sleep(5)
# finish = time.time() - start
# print(finish)

#  =========================================================================

#  ФУНКЦИИ========= функция отделяется двумя пустыми строками сверху и снизу( 2 enter)


# def hello(name, age):
#     print("Меня зовут:", name, "мне", age, "лет")
#
#
# hello("Irina", 20)
# hello(45, "Ivan")

# ======================================


# def get_sum(a, b):  # название функции пишется в нижнем регистре слова через подчеркивание
#     print(a + b)
#
#
# get_sum(34, 32)
# x = 12
# y = 4
# get_sum(x, y)
# get_sum("abc", "sdf")

# ========================================


# def get_sum(a, b):
#     return a + b  # ретерн прерывает выполнение функции. что б записать функцию в переменную нужно использовать ретерн
#
#
# x = 12
# y = 122
# res = get_sum(x, y)
# print(res)


# ===========================================
# задача поменять местами первое и последнее значения в списках


# def change(lst):
#     lst[0], lst[-1] = lst[-1], lst[0]
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))
# ========== то же самое


# def change(lst):
#     end = lst.pop()
#     start = lst.pop(0)
#     lst.append(start)
#     lst.insert(0, end)
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))
# =========================================================================


# def test(x, y):
#     if x > y:
#         return True
#     else:
#         return False
#
#
# num1 = 10
# num2 = 15
# if test(num1, num2):
#     print(num1, ">", num2)
# else:
#     print(num1, "<", num2)
# ========================================================================
# задача проверка пароля

#
# def check_password(password):
#     has_upper = False
#     has_lower = False
#     has_number = False
#     for ch in password:
#         if "A" <= ch <= "Z":
#             has_upper = True
#         if "a" <= ch <= "z":
#             has_lower = True
#         if "0" <= ch <= "9":
#             has_number = True
#     if len(password) >= 8 and has_upper and has_lower and has_number:  # len - длина
#         return True
#     return False
#
#
# p = input("Введите пароль: ")
# if check_password(p):
#     print("Это надежный пароль")
# else:
#     print("Это ненадежный пароль")

# =========================================================================
# именованные параметры функции

# def get_sum (a, b, c=0, d=1):  # c=0, d=1 - именованный параметр - параметр по умолчанию если он не указан при вызове
#     return a + b + c + d
#
#
# print(get_sum(1, 2, 4, 5))
# print(get_sum(1, 2, 4))
# print(get_sum(1, 2))
# print(get_sum(1, 2, d=2))  # что бы с - был по умолчанию, а d - задан
# ===========================================================================


# def display_info(name, age):
#     print("Name:", name, "\nAge:", age)
#
#
# display_info("Ira", 23)
# display_info(23, "Ira")
# display_info(age=23, name="Ira")  # что бы не перепутывались при разном порядке в вызове
# ===========================================================================
#
# a = "Hello"
# b = "Hello"
# print(a == b)  # равны ли a и b (True)
# print(a is b)  # ссылаются ли они на одну ячейку памяти (True)
#
# lt1 = [1, 2, 3]
# lt2 = [1, 2, 3]
# print(lt1 == lt2)  # равны ли lt1 и lt2 (True)
# print(lt1 is lt2)  # ссылаются ли они на одну ячейку памяти (False)
# # потому что у списков разные ID список это изменяемый тип данных

# ====================================================================
#
#
# def test(lst):
#     lst.append(4)
#
#
# x = [1, 2, 3]
# print(test(x))
# print(x)
#
#
# def test1(lst):
#     n = 5
#
#
# x1 = 3
# print(test1(x1))
# print(x1)
# ==========================================================================
#
# # кортежи - tuple
#
# lst = [10, 20, 30]  # список
# tpl = (10, 20, 30)  # кортеж - изменить данные или добавить или убрать в кортеже нельзя

# ====================================================================================================
# 29.03.25

# a = ()
# print(a, type(a))
# b = tuple("Hello")
# print(b, type(b))
#
# a = 1, 2, 3, 4, 5, 6
# print(a, type(a))

# ========================================

# a = (1, 2, 3, 4, 5, 6)
# print(a, type(a))
# print(a[2])
# print(a[1:4])

# =========================================

# s = tuple(int(input("-> ")) for i in range(5))
# print(s)
# ==============================================
# from random import randint
#
# s = tuple(randint(50, 100) for i in range(5))
# print(s)
# ==========================================================

# t1 = tuple("Hello")
# t2 = tuple("world")
# print(t1)
# print(t2)
# t3 = t1 + t2  # сложение кортежей
# # print(t3 * 3)  # умножение только на целое число
# print(t3.count("l"))  # находит количество введенных элементов в кортеже
# print(t3.index("l"))  # находит индекс введенного элемента(первый найденный)
# print(t3.index("l", 4))
#
# for i in t3:
#     print(i, end=" ")

# =============================================================
# задача

#
# def slicer(tpl, el):
#     if el in tpl:
#         if tpl.count(el) > 1:
#             first = tpl.index(el)
#             second = tpl.index(el, first + 1) + 1
#             return tpl[first:second]
#         else:
#             return tpl[tpl.index(el):]
#     else:
#         return tuple()
#
#
# print(slicer((1, 2, 3), 8))
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))

# =============================================================
# задача
# from random import randint
#
#
# def ran(a, b):
#     return tuple(randint(a, b) for i in range(10))
#
#
# tpl1 = ran(0, 5)
# print(tpl1)
# tpl2 = ran(-5, 0)
# print(tpl2)
# tpl3 = tpl1 + tpl2
# print(tpl3)
# print("0 =", tpl3.count(0))

# =================================================================
# match в кортеже

# point = (10, 0)
#
# match point:
#     case(0, 0):
#         print("Точка находится в координате 0:0")
#     case (x, 0):
#         print("Точка находится в", x, "по оси X и в 0 координат по оси Y")
#     case (0, y):
#         print("Точка находится в 0 по оси X и в ", y, "координат по оси Y")

# =========================================================================

# t = (10, 11, [1, 2, 3], [4, 5, 6], ["Hello", "world"])
# print(t)
# t[4][0] = "new"  # список внутри кортежа менять можно
# print(t)
# t[4].append("hi")
# print(t)

# ======================================================================
# распаковка кортежа

# t = (1, 2, 3)
# x = t[0]
# y = t[1]
# z = t[2]
# print(x, y, z)
# ========= То же самое
# t = (1, 2, 3)
# x, y, z = t
# print(x, y, z)
# ==================================================================


# def get_user():  # когда функция возвращает больше одного элемента получается кортеж
#     name = "Tom"
#     age = 22
#     is_maried = False
#     return name, age, is_maried


# user = get_user()
# print(user)
# first_name, year, married = user  # распаковка кортежа
# print(first_name, year, married)
# ========= то же самое
# first_name, year, married = get_user()
# print(first_name, year, married)

# ========================================================================

# t = (1, 2, 3)
# del t  # del удаляет кортеж полностью и переменная перестает существовать
# print(t)

# =================================================================
# преобразование кортежа в список, изменение и обратное преобразование в кортеж

# t = (1, 2, 3, 4, 5)
# print(t, type(t))
# lst = list(t)
# print(lst, type(lst))
# lst.append(6)
# print(lst, type(lst))
# tpl = tuple(lst)
# print(tpl, type(tpl))

# ====================================================================

# countries = (
#     ("Германия", 88.2, (("Берлин", 3.326), ("Гамбург", 1.718))),
#     ("Франция", 66, (("Париж", 2.2), ("Марсель", 1.6)))
# )
# print(countries, end="\n\n")
#
# for country in countries:
#     country_name, country_population, cities = country
#     print("\nСтрана ", country_name, ", население = ", country_population, sep="")
#     for city in countries:
#         city_name, city_population = cities
#         print("\tГород", city_name, ", население = ", city_population, sep="")

# =======================================================================

# s = input("Введите по порядку, без пробела элементы кортежа: ")
# tpl = tuple(s)
# print(tpl)
# lst = []
# for i in range(len(tpl)):
#     if tpl[i] not in lst:
#         lst.append(tpl[i])
#
# for i in range(len(lst)):
#     print("Количество", lst[i], "=", tpl.count(lst[i]))

# ======================================================================

# тип данных множество (set)

# s = {"one", "two", "three"}  # у множества нет индексов и хранятся не упорядочено
# print(s)
# s2 = {"one", "two", "three", "one", "two", "three"}  # хранит только уникальные элементы (не будет одинаковых элемен
# тов)
# print(s2)

# b = set()  # Создание пустого множества
# print(b, type(b))
# ==================================================

# s = {x for x in range(10)}
# s = {input("-> ") for x in range(10)}
# print(s)
# =============================================

# s = {"one", "two", "three"}  # находит элементы в множестве
# print("two" in s)
# print("four" in s)

# ==============================================================

# lst = ["ab_1", "ac_2", "bc_1", "bc_2"]
# print([i for i in lst if 'a' in i])  # список list
# print(tuple(i for i in lst if 'a' in i))  # кортеж tuple
# print({i for i in lst if 'a' in i})  # множество set
#
# print(['A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst])
#
# print(['A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst if i[1] == 'c'])

# =======================================================================

# s = {"one", "two", "three"}
# s.add("four")  # добавление элемента в множество (добавляет в случайный порядок)
# print(s)
# s.remove("four")  # удаление элемента (нужно указывать конкретный элемент(значение)), если элемента нет выдаст ошибку
# print(s)
# s.discard("five")  # удаление элемента по значению, если элемента нет ничего не делает
# s.pop()  # удаление элемента(получается случайного)
# s.clear()  # очистка множества (удалит все элементы множество и оно останется пустым)
# ======================================================================

# a = {0, 1, 2, 3, }
# b = {4, 3, 2, 1}
# # c = a.union(b)  # объединение двух множеств (удалит дубликаты)
# # d = a | b  # объединение двух множеств (удалит дубликаты)
# # a |= b  # объединение двух множеств (удалит дубликаты) только перезапишет переменную a
# # print(c)
# # print(d)
# c = a & b  # амперсант - выдаст пересекающиеся элементы(дубликаты)
# a &= b  # амперсант - выдаст пересекающиеся элементы(дубликаты) перезапишет переменную a
# print(c)
# c = a ^ b  # выдаст то что есть в b и отсутствует в a
# print(c)
# ===============================================================================
# ================================= 30.03.25 ======================


# s1 = "Hello"
# s2 = "How are you"
# s3 = set(s1) & set(s2)
# print(s3)
# print("Общие буквы:")
# for i in s3:
#     print(i, end=" ")
# ================================================================

# a = {0, 1, 2, 3, 4}
# b ={3, 2, 1}
# print(a >= b)  # является ли b подмножеством a (True)
# print(a <= b)  # является ли a подмножеством b (False)

# =======================================================================
# преобразование коллекционных типов данных
# a = {0, 1, 2, 3, 4}
# print(a, type(a))
# lst = list(a)
# print(lst, type(lst))
# tup = tuple(a)
# print(tup, type(tup))
# ========================================================================

# тип данных frozenset - неизменяемый тип данных (неизменяемое множество(set))
# используется в основном для хранения данных

# s = frozenset("Hello")
# print(s, type(s))

# =========================================


# тип данных словарь - dict
# у него должен быть ключ и значение

# lst = [1, 2, 3]  # список
# d = {"one": 1, "two": 2, "three": 3}
# print(d, type(d))
# словарь (one и т.д. это ключи)
# у словаря нет индексов, но есть ключи. по ним и нужно обращаться к значениям.
# ключи придумываем сами
# ключами могут быть только неизменяемые типы данных
# ключи должны быть уникальными
# =======================================================
#
# d = {}  # пустой словарь
# print(d, type(d))
#
# d1 = dict()  # пустой словарь
# print(d1, type(d1))

# d = {"one": 1, "two": 2, "three": 3}
# print(d, type(d))
# d1 = dict({"one": 1, "two": 2, "three": 3})
# print(d1, type(d1))
# d2 = dict(one=1, two=2, three=3)  # тоже способ создания словаря
# print(d2, type(d2))

# ======================================================================


# d = {i: i for i in range(7)}  # создание словаря циклом
# print(d)

# =====================================================================

# d = {i: input("->") for i in range(7)}  # ключи генерируются числовые значения вводятся пользователем
# print(d)
# d = {input("->"): input("->") for i in range(7)}  # ключи и значения вводятся пользователем
# print(d)


# ранодомная генерация числового словаря:

# from random import randint
#
# d = {randint(1, 10): randint(50, 100) for i in range(10)}
# print(d)

# ============================================================================

# d = {"one": 1, "two": 2, "three": 3}
# del d["two"]  # удаление значения по ключу. ключ без значения удаляется тоже
# print(d)
# ====================================================================

# d = {"one": 1, "two": 2, "three": 3}
# for i in d:
#     print(i, d[i])
# ====================================================================
# задача

# d = dict()
# d[1] = input("->")
# d[2] = input("->")
# d[3] = input("->")
# d[4] = input("->")
# print(d)
# ====
# d = {i: input("->") for i in range(1, 5)}
# print(d)
# q = int(input("Какой элемент исключить: "))
# del d[q]
# print(d)
# ===============================================================
# задача
#
# goods = {
#     "1": ["Core-i3-4330", 9, 4500],
#     "2": ["Core-i5-43570k", 3, 8500],
#     "3": ["AMD FX-6300", 4, 3700],
#     "4": ["Pentium G3220", 5, 2100],
#     "5": ["Core-i5-3450", 6, 6400],
# }
#
# for i in goods:
#     print(i, ")", goods[i][0], " - ", goods[i][1], "шт. по ", goods[i][2], "руб", sep="")
#
# while True:
#     n = input("№: ")
#     if n != "0":
#         if n in goods:
#             while True:
#                 try:
#                     count = int(input("Количество: "))
#                     while True:
#                         if count > 0:
#                             goods[n][1] += count
#                             break
#                         else:
#                             print("Количество должно быть положительным")
#                             count = int(input("Количество: "))
#                     break
#                 except ValueError:
#                     print("Значение некорректно. Введите число")
#         else:
#             print("Такого ключа не существует")
#     else:
#         break
#
# for i in goods:
#     print(i, ")", goods[i][0], " - ", goods[i][1], "шт. по ", goods[i][2], "руб", sep="")

# ==========================================================================
# методы словарей

# d = {"one": 1, "two": 2, "three": 3}
# print(d.keys())  # список ключей
# print(d.values())  # список значений
# print(d.items())  # список кортежей ключей и значений
# =========

# d = {"one": 1, "two": 2, "three": 3}
#
# for i in d:
#     print(i, end=" ")
# print()
# for i in d.keys():
#     print(i, end=" ")
# print()
# for i in d.values():
#     print(i, end=" ")
# print()
# for i in d.items():
#     print(i, end=" ")
# print()
# for i, j in d.items():
#     print(i, ":", j)
# print()

# =============================================================

# d = {"one": 1, "two": 2, "three": 3}
# d2 = d
# d2["two"] = 200  # изменения коснутся обоих словарей
# print("D =", d)
# print("D2 =", d2)

# =================================================================

# d = {"one": 1, "two": 2, "three": 3}
# d2 = {"four": 4, "five": 5}
# value = d.get("three")  # что б исключить ошибку KeyError если такого ключа нет
# value = d.get("three2", "Такого элемента нет")  # первый параметр ключ второй что угодно, можно использовать как
# сообщение пользователю
# value = d.pop("two")  # удаляет элемент и возвращает его в переменную
# value = d.pop("two1", "такого ключа нет")  # второй параметр срабатывает когда такого ключа не найдено
# value = d.popitem()  # удаляет и возвращает в переменную ключ и значение
# d.clear()  # очистка словаря
# value = d.setdefault("four", 4)  # добавляет ключ и значение только если такого ключа нет в словаре
# d3 = d | d2  # объединение словарей как с set(множества) при одинаковых ключах остается один последний
# d.update(d2)  # то же что и |
# print(value)
# print(d)
# print(d3)

# =======================================================================================================

# 05.04.25


# d = {"name": "Kelly", "age": 25, "salary": 0000, "city": "New York"}
# print(d)
# d["location"] = d.pop("city")
# print(d)
# ================================================================

# s = {
#     "first": {
#         1: "one",
#         2: "two",
#         3: "three"
#     },
#     "second": {
#         4: "four",
#         5: "five"
#     }
# }
# print(s)
#
# for x in s:
#     print(x)
#     for y in s[x]:
#         print("\t", y, ": ", s[x][y], sep="")
# print()
# # ====== то же самое
# for x, y in s.items():
#     print(x)
#     for i, j in y.items():
#         print("\t", i, ": ", j, sep="")

# ==================================================================

# d = {"один": 1, "два": 2, "три": 3, "четыре": 4}
# print({key: value for key, value in d.items()})
# print({value: key for key, value in d.items()})
# print({key: value for key, value in d.items() if value <= 2})

# ===========================================================

# d = {"один": 1, "два": 2, "три": 3, "четыре": 4}
# print(list(d))
# print(list(d.keys()))
# print(list(d.values()))
# print(list(d.items()))

# ========================================================

# a = ["one", 1, 2, 3, "two", 10, 20, "three", 15, 36, 68, "four", -20]
# d = dict()
# s = None
#
# for i in a:
#     if type(i) is str:  # type(i) == str  (тоже самое)
#         d[i] = []
#         s = i
#     else:
#         d[s].append(i)
#
# print(d)

# =========================================================

#  zip()  позволяет создать новый тип данных путем обьединения нескольких

# a = ["декабрь", "январь", "февраль"]
# b = [12, 1, 2]
# c = [1.8, 2.8, 3.8]
# print(dict(zip(a, b)))  # словарь (в словаре может быть только два элемента и желательно одну длину списков иметь ина
# че  он будет обрезать по минимальной длине)
# print(list(zip(a, b)))  # список кортежей
# print(list(zip(a, b, c)))  # список кортежей
# print(tuple(zip(a, b, c)))  # кортеж кортежей
#
# month = [('декабрь', 12), ('январь', 1), ('февраль', 2)]
# a, b = zip(*month)
# print(a)
# print(b)

# =====================================================================================

# one = {"name": "Irina", "surname": "Petrova", "job": "Consultant"}
# two = {"name": "Igor", "surname": "Vetrov", "job": "Manager"}
#
# for (k1, v1), (k2, v2) in zip(one.items(), two.items()):
#     print(k1, "->", v1)
#     print(k2, "->", v2)

# =========================================================================

# letters = ["a", "c", "b", "d"]
# numbers = [3, 4, 2, 1]
#
# lst = list(zip(letters, numbers))
# print(lst)
# lst.sort()
# print(lst)
# print(dict(lst))
# print({v: k for k, v in lst})

# ===========================================================
# распаковка.

# a = [1, 2, 3]
# b = [*a, 4, 5, 6]  # распаковка списка a (*)
# print(b)
# print(*a)
#
# one = {"one": 1, "two": 2}
# two = {"three": 3, "four": 4}
# print({**one, **two})  # распаковка словаря (две *)
# =======================================================================

# a = ["январь", "февраль", "март"]
# i = 1
# for i, value in enumerate(a, 1):  # нумерация второй параметр это начало нумерации(без него будет от 0)
#     print(i, ") ", value, sep="")

# ===================================================================

# one = {"name": "Irina", "surname": "Petrova", "job": "Consultant"}
#
# for i, (k, v) in enumerate(one.items(), 1):
#     print(i, ") ", k, ": ", v, sep="")

# ==========================================================================

# аргумент со * должен быть только один
# def func(*args):  # * в аргументе для того, чтоб использовать больше параметров или не использовать вообще
#     return args
#
#
# print(func(5))
# print(func(5, 6, 7))
# print(func())

# ====================================================

#
# def summa(*params):
#     res = 0
#     for i in params:
#         res += i
#     return res
#
#
# print(summa(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
# print(summa(7, 8, 9, 10))

# ============================================================


# def search(*args):
#     average = sum(args) / len(args)
#     print(average)
#
#     res = []
#     for num in args:
#         if num < average:
#             res.append(num)
#     return res
#
#
# print(search(1, 2, 3, 4, 5, 6, 7, 8, 9))
# print(search(3, 6, 1, 9, 5))

# ==================================================


# def func(a, *args):
#     return a, *args
#
#
# print(func(5))
# print(func(5, 1, 2, 3, 4))

# ================================================================


# def print_scors(student, *scores):
#     print("Student nam:", student, end=". Score: ")
#     for score in scores:
#         print(score, end=", ")
#     print()
#
#
# print_scors("Irina", 100, 95, 88, 92, 99)
# print_scors("Igor", 96, 20, 33, 56)

# =================================================================


# def func(**kwargs):
#     return kwargs
#
#
# print(func(a=1, b=2, c=3))
# print(func())

# ============================================================


# def info(**data):
#     for k, v in data.items():
#         print(k, ": ", v, sep="")
#     print("\n")
#
#
# info(name="Irina", surname="Vetrova", age=22, phone="22-33-44")
# info(name="Igor", age=25, phone="99-00-22", email="adas@m.ru")

# ======================================================================

# элемент ** должен идти после * аргумент по умолчанию (m=100) должен быть между элементами * и **
# def func(a, *args, m=100, **kwargs):
#     return a, args, kwargs, m
#
#
# print(func(5, 2, 3, 4, 5, 6, c=78))

# ====================================================================

# области видимости (scope)

# name = "Tom"  # глобальная область видимости видна везде
#
#
# def hi():
#     global surname  # делает локальную глобальной
#     name = "Same"
#     surname = "Jonson"  # локальная область видимости существует только в функции
#     print("Hello", name)
#
#
# def bye():
#     print("Good bye", name)
#
#
# hi()
# bye()
# print(surname)

# ======
# builtins встроенная область видимости - все встроенные функции, переменные и ошибки интерпритатора Python
# =================================
# 06.04.25

# Enclosed - локальная объемлющая


# def add(a):
#     x = 2  # локальная объемлющая для второй функции(внутренней) область видимости
#
#     def inner():
#         print("x =", x)
#         return a + x
#
#     return inner()
#
#
# print(add(3))

# ===================


# def outer(who):
#     def inner():
#         print("Hello", who)
#     inner()
#
#
# outer("World")

# ======================
# последовательность работы функции с вложенной функцией

# def outer():
#     a = 6  # 2
#
#     def inner(b):
#         a = 4  # 5
#         print("Сумма:", a + b)  # 6
#
#     print("a =", a)  # 3
#     inner(5)  # 4
#
#
# outer()  # 1

# ====================================================================

# x = 25
# t = 0
#
#
# def fn():
#     global t
#     a = 30
#
#     def inner():
#         nonlocal a
#         a = 35
#         print("a =", a)
#
#     inner()
#     t = a
#
#
# fn()
# c = x + t
# print(c)

# ====================================

# def fn1():
#     x = 25
#
#     def fn2():
#         x = 33  # перезапишется на 55
#
#         def fn3():
#             nonlocal x  # поднимает на уровень выше, кроме глобальной области видимости
#             x = 55
#
#         fn3()
#         print("fn2.x =", x)  # 33
#
#     fn2()
#     print("fn1.x =", x)  # 25
#
#
# fn1()

# =========================================================

#
# def outer(a1, b1, a2, b2):
#     a = 0
#     b = 0
#
#     def inner():
#         nonlocal a, b
#         a = a1 + a2
#         b = b1 + b2
#
#     inner()
#     return [a, b]
#
#
# print(outer(2, 3, 1, 4))

# ================================================================


# def func1():
#     a = 1
#     b = "Line"
#     c = [1, 2, 3]
#
#     def func2():
#         nonlocal a
#         c.append(4)
#         a = a + 1
#         return a, b, c
#
#     return func2()
#
#
# print(func1())

# ================================================

# Замыкание - функция возвращает функцию


# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# p1 = outer(5)
# print(p1(10))
# print(p1(11))
#
# p2 = outer(6)
# print(p2(4))

# =======================================================================
# задачка


# def func(city):
#     count = 0
#
#     def inner():
#         nonlocal count
#         count += 1
#         print(city, ". количество вызовов: ", count, sep="")
#
#     return inner
#
#
# res1 = func("Москва")
# res1()
# res1()
# res1()
# res1()
# res2 = func("Сочи")
# res2()
# res2()
# res2()
# res1()

# =============================================================================

# анонимные функции - Lambda - выражения

# print((lambda x, y: x + y)(1, 2))
#
# fn = lambda x, y: x + y  # так будет работать, но так неправильно
# print(fn(5, 6))

# ============================================================

# print((lambda x, y: x ** 2 + y ** 2)(2, 5))

# print((lambda a, b, c: a + b + c)(1, 2, 3))
# print((lambda a, b, c=3: a + b + c)(1, 2))  # со значением по умолчанию
# print((lambda a, b, c=3: a + b + c)(b=1, a=2))  # с именованными параметрами
# print((lambda *args: sum(args))(1, 2, 3, 4, 5, 6))

# c = (  # кортеж с анонимными функциями - Lambda - выражениями
#     lambda x: x * 2,
#     lambda x: x * 3,
#     lambda x: x * 4
# )
#
# for t in c:
#     print(t("abc__"))

# ===============================================================

# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# f = outer(5)
# print(f(10))
# =============== то же самое


# def outer(n):
#     return lambda x: n + x
#
#
# f = outer(5)
# print(f(10))
# =============== то же самое

# outer = lambda n: lambda x: n + x
# f = outer(5)
# print(f(10))
# ================ то же самое

# print((lambda n: lambda x: n + x)(5)(10))

# ===========================================================================

# d = {"b": 3, "c": 1, "a": 2}
# lst = list(d.items())
# print(lst)
# lst.sort(key=lambda i: i[1])
# print(lst)
# print(dict(lst))

# =====================================================================

# players = [
#     {"name": "Антон", "last name": "Бирюков", "rating": 9},
#     {"name": "Алексей", "last name": "Бодня", "rating": 10},
#     {"name": "Федор", "last name": "Сидоров", "rating": 4},
#     {"name": "Михаил", "last name": "Семенов", "rating": 6}
# ]
#
# print(sorted(players, key=lambda item: item["last name"]))
# print(sorted(players, key=lambda item: item["rating"], reverse=True))
# print(sorted(players, key=lambda item: item["rating"]))

# =====================================================================

# lst = [
#     (lambda x, y: x + y),
#     (lambda x, y: x - y),
#     (lambda x, y: x * y),
#     (lambda x, y: x / y)
# ]
# print(lst[0](10, 5))

# =====================================================================

# d = {
#     1: lambda: print("Понедельник"),
#     2: lambda: print("Вторник"),
#     3: lambda: print("Среда"),
#     4: lambda: print("Четверг"),
#     5: lambda: print("Пятница"),
#     6: lambda: print("Суббота"),
#     7: lambda: print("Воскресенье")
# }
#
# d[7]()

# ====================================================================

# print((lambda a, b: a if a > b else b)(5, 7))

# =====================================================================

# map(func, *iterable), filter(func, *iterable)


# def mult(t):
#     return t * 2
#
#
# lst = [2, 8, 12, -5, -10]
#
# print(list(map(mult, lst)))  # map применяет функцию mult к обьектам в lst. и нужно явно указать с каким типом данных
# работаем (в данном случае list)

# ===== то же самое через лямбда

# print(list(map(lambda t: t * 2, lst)))

# ======== то же самое еще короче

# print(list(map(lambda t: t * 2,[2, 8, 12, -5, -10])))

# =================================================================

# t = (2.88, -1.75, 100.55)
# print(tuple(map(lambda x: int(x), t)))
# print(tuple(map(int, t)))

# =================================================================

# st = ["a", "b", "c", "d", "e"]
# num = [1, 2, 3, 4, 5]
# val = [2.0, 5.4, 7.8, 9.4, 7.4]
# print(list(map(lambda x, y, z: (x, y, z), st, num, val)))
# print(dict(map(lambda x, y: (x, y), st, num)))
# ===============================================================
# 12.04.25


# l1 = [1, 2, 3]
# l2 = [4, 5, 6]
# new_list = list(map(lambda x, y: x + y, l1, l2))
# print(new_list)
# ===================================================================
# filter(func, *iterable)

# t = ("abcd", "abc", "adefg", "def", "asd")
#
# t2 = tuple(filter(lambda s: len(s) == 3, t))
# print(t2)
# ====================================

# b = [66, 99, 68, 59, 76, 60, 88, 74, 81, 68]
# res = list(filter(lambda s: s > 75, b))
# res2 = list(filter(lambda s: s > sum(b) / len(b), b))
# print(res)
# print(res2)
# ===========================================================

# print(list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10)))))
# print(list(range(1, 10)))
# ===================================================================

# функцию можно присваивать в переменную(имя без скобок) и переменная становится функцией вызывать ее нужно с скобками
# def hello():
#     return "Hello, I am func 'hello'"
#
#
# def super_func(func):
#     print("Hello, I am func 'super_func'")
#     print(func())
#
#
# super_func(hello)

# ================================================================
# Декораторы - @имя_функции


# def my_decorator(func):  # декорирующая функция
#     def inner():
#         print("код до вызова функции")
#         func()
#         print("код после вызова функции")
#     return inner
#
#
# @my_decorator  # вызов декорирующей функции
# def func_test():  # функция, которая будет за декорирована
#     print("Hello, I am func 'func_test'")
#
#
# func_test()

# ===========================

#
# def bold(fn):
#
#     def wrap():
#         return "<b>" + fn() + "</b>"
#
#     return wrap
#
#
# def italic(fn):
#
#     def wrap():
#         return "<i>" + fn() + "</i>"
#
#     return wrap
#
#
# @italic
# @bold
# def hello():
#     return "text"
#
#
# print(hello())

# ================================


# def cnt(fn):
#     count = 0
#
#     def wrap():
#         nonlocal count
#         count += 1
#         fn()
#         print("Вызов функции:", count)
#
#     return wrap
#
#
# @cnt
# def hello():
#     print("Hello")
#
#
# hello()
# hello()
# hello()
# hello()
# ========================================================


# def outer(fn):
#     def wrap(arg1, arg2):
#         fn(arg1, arg2)
#
#     return wrap
#
#
# @outer
# def print_full_name(first, last):
#     print("Меня зовут", first, last)
#
#
# print_full_name("Ирина", "Ветрова")

# ====================================================


# def outer(fn):
#     def wrap(*args, **kwargs):
#         print("args:", args)
#         print("kwargs:", kwargs)
#         fn(*args, **kwargs)
#
#     return wrap
#
#
# @outer
# def print_students(a, b, c, study="Python"):
#     print(a, b, c, "изучают", study, "\n")
#
#
# print_students("Борис", "Елизавета", "Светлана", study="JavaScript")
# print_students("Владимир", "Екатерина", "Виктор")
# ======================================================================

# def decor(args1, args2):
#     def args_dec(fn):
#         def wrap(x, y):
#             print(args1, x, args2, y, "=", end=" ")
#             fn(x, y)
#
#         return wrap
#     return args_dec
#
#
# @decor("Сумма:", "+")
# def summa(a, b):
#     print(a + b)
#
#
# @decor("Разность:", "-")
# def sub(a, b):
#     print(a - b)
#
#
# summa(5, 10)
# sub(5, 2)

# ===========================================================


# def multiply(arg):
#     def outer(fn):
#         def inner(*args, **kwargs):
#             return arg * fn(*args, **kwargs)
#         return inner
#     return outer
#
#
# @multiply(3)
# def return_num(num):
#     return num
#
#
# print(return_num(5))

# =============================================================


# def typed(*args, **kwargs):
#     def wrapper(fn):
#         def wrap(*f_args, **f_kwargs):
#             for i in range(len(args)):
#                 if type(f_args[i]) is not args[i]:
#                     raise TypeError("Некорректный тип данных")
#             for k in kwargs:
#                 if type(f_kwargs[k]) is not kwargs[k]:
#                     raise TypeError("Некорректный тип данных")
#
#             return fn(*f_args, **f_kwargs)
#
#         return wrap
#     return wrapper
#
#
# @typed(int, int, int)
# def typed_fn(x, y, z):
#     return x * y * z
#
#
# @typed(str, str, str)
# def typed_fn2(x, y, z):
#     return x + y + z
#
#
# @typed(str, str, int)
# def typed_fn3(x, y, z):
#     return (x + y) * z
#
#
# print(typed_fn(3, 4, 5))
# print(typed_fn(3, 4, 4))
# print(typed_fn2("adf", "dfrgrt", "www"))
# print(typed_fn3("Hello", "world", 5))

# =======================================================================

# print(bin(18))  # bin преоброзует 10чную в 2ичную (префикс 0b)
# print(oct(18))  # oct преоброзует 18чную в 8ичную (префикс 0o)
# print(hex(18))  # hex преоброзует 10чную в 16ичную (префикс 0x)
#
# print(0b10010)  # 18 в двоичной
# print(0o22)  # 18 в восьмеричной
# print(0x12)  # 18 в 16ричной
# print(0x12 + 0b10010 + 0o22 + 18)
# когда пишешь в отличной системы счисления от 10 нужно вначале писать префикс

# ===================================================================
# строки

# q = 'Pyt'
# w = "hon"
# e = q + w
# print(e)
# print(e * 3)

# s = "Hello"
# print(s[1])
# print("H" in s)
# print(s[1:3])

# print("Привет")
# print(u"Привет")  # префикс u - юникод(использовался в старых версиях питона, что б другой язык не ломал)
# print(r"C:\folder\file.py")  # префикс r - вместо экранирования (в конце строки нельзя поставить один \)
# print(b"a1b2c4")  # префикс b - бинарный код(байтовая строка)
# name = "Дмитрий"
# age = 25
# print(f"Меня зовут {name}. Мне {age} лет.")  # префикс f - что б вставлять переменные в строку

# ==================================================================================================================
# 13.04.25
# строки продолжение

# x = 10
# y = 5
# print(f"{x=}, {y=}")
# print(f"{x} x {y} / 2 = {x * y / 2}")
# print(f"{round(45.322646)}")
# print(f"{45.322646:.2f}")  # .2f - округление до 2х символов после запятой работает в f строке
# num = 74
# print(f"{{num}}")  # экранирование фигурных скобок(покажет имя переменной(num))
# print(f"{{{num}}}")  # экранирование экранирования покажет значение переменной в фигурных скобках({74})

# dir_name = "folder"
# file_name = "file.py"
# print(fr"home\{dir_name}\{file_name}")  # префикс fr - экранирование \ и подстановка переменных в строке

# =================================================================

# s = """Многострочный текст
# будет переносить на новую строку по энтер
# сохраняет все форматирование
# ставятся тройные кавычки должен
# находиться в переменной
# """
# print(s)

# ======================================


# def square(n):
#     """принимает число n, возвращает квадрат числа n """  # первой строкой в функции в трех ковычках можно писать описание функции
#     return n ** 2
#
#
# print(square(5))
# print(square.__doc__)  # описание функции(документирование функции)


# ======================================================================
#  ord - вывести код символа
# print(ord("a"))
# print(ord("#"))
# print(ord("Ц"))
# ========================================

# while True:
#     n = input("->")
#     if n == "-1":
#         break
#     else:
#         print(ord(n))

# ================================================

# my_str = "Test string for me"
# arr = [ord(x) for x in my_str]
# print("ASCII коды", arr)
# arr = [int(sum(arr) / len(arr))] + arr
# print(arr)
# arr += [ord(x) for x in input("->")[:3] if ord(x) not in arr]
# print(arr)
# print(arr.count(arr[-1]) - 1)
# arr.sort(reverse=True)
# print(arr)

# ============================================================

# print(chr(1025))  # chr - код символа переводит в символ

# =============================================================
# задача

# a = 122
# b = 97
# if b > a:
#     a, b = b, a
#     for i in range(b, a + 1):
#         print(chr(i), end=" ")

# =====================================================
# задача случайный пароль

# from random import randint
#
# shortest = 8
# longest = 16
# min_ascii = 33
# max_ascii = 126
#
#
# def random_password():
#     random_length = randint(shortest, longest)
#     res = ""
#     for i in range(random_length):
#         res += chr(randint(min_ascii, max_ascii))
#     return res
#
#
# print("Ваш случайный пароль:", random_password())

# ==========================================================================

# s = "hello, WORLD! I am learning Python. Python"
# print(s.capitalize())  # будет первая буква строки большая остальные маленькие
# print(s.lower())  # все символы в нижнем регистре
# print(s.upper())  # все символы в верхнем регистре
# print(s.swapcase())  # инвертирует регистр символа
# print(s.title())  # каждое слово после пробела с большой буквы
#
# print(s.count("h"))  # считает сколько раз встречается этот символ в строке
# print(s.lower().count("l"))  # перевел все в нижний регистр и нашел сколько букв l
# print(s.count("h", 0, 7))  # поиск сколько h в строке в диапазоне
#
# print(s.find("Python"))  # возвращает индекс подстроки, если совпадений нет вернет -1
# print(s.find("l", 4, 19))  # по диапазону
# print(s.rfind("l"))  # тоже что и find только ищет с конца строки

# print(s.index("Python"))  # возвращает индекс подстроки, если совпадений нет выдаст ошибку

# print(s.endswith("on."))  # True или False окончание строки
# print(s.endswith("LD!", 10, 13))  # True или False окончание диапазона

# print(s.startswith("hel"))  # True или False начало строки
# print(s.startswith("I am", 14))  # True или False начало диапазона

# print("abc123".isalnum())  # определяет, состоит ли строка из букв и цифр (True или False)
# print("ABCabc".isalpha())  # определяет, состоит ли строка из букв(True или False)
# print("123".isdigit())  # определяет, состоит ли строка цифр (True или False)
# print("avb".islower())  # определяет, состоит ли строка из букв в нижнем регистре не обращает внимание на цифры и
# # спецсимволы(True или False)
# print("ACV".isupper())  # определяет, состоит ли строка из букв в верхнем регистре не обращает внимание на цифры и
# спецсимволы(True или False)

# print("py".center(10, "-"))  # выравнивание по центру относительно заданного количества(первый параметр)
# второй параметр это какими символами окружить вместо пробелов

# print("    py".lstrip())  # удаляет пробелы слева
# print("py    ".rstrip())  # удаляет пробелы справа
# print("   py   ".strip())  # удаляет пробелы
# print("https://www.python.org".lstrip("/:psth"))  # удаляет символы перечисленные впараметре слева, но до того символа
# в строке которого нет в параметре далее останавливается

# print(s.replace("Python", "JS", 1))  # поиск и замена(первый параметр что искать, второй на что менять
# , третий сколько раз менять если найдено не один раз

# s1 = "-"
# seq = ("a", "b", "c")
# print(s1.join(seq))  # разделитель
# print(":".join("hello"))

# print("Строка разделенная пробелами".split())
# print("www.python.org".split("."))
# print("www.python.org".split(".", 2))
# print("www.python.org".rsplit(".", 2))

# ================================================================
# задача перестановка слов в одной строке

# st = "один два"
# print(st)
# first = st[:st.find(" ")]
# print(first)
# second = st[st.find(" ") + 1:]
# print(second)
# print(f"{second} {first}")

# ===================================================================
# задача

# fio = input("Введите ФИО: ").split()
# print(fio)
# print(f"{fio[0]} {fio[1][0]}. {fio[2][0]}.")

# =============================================================

# lst = input("Введите числа через пробел: ").split()
# print(lst)
# lst = list(map(int, lst))
# print(lst)
# print(sum(lst))

# ===========================================================================
# 20.04.25

# import re
#
# s = "Я ищу совпадения в 2025 году. и я их райду в 2 счёта."
# reg = "я"

# print(re.findall(reg, s))  # возвращает список содержащий все совпадения(первый параметр шаблон, второй строка где искать)
# print(re.search(reg, s))  # возвращает индексы совпадений
# print(re.search(reg, s).span())  # возвращает кортеж индексов совпадений
# print(re.search(reg, s).start())  # возвращает первый индекс совпадения
# print(re.search(reg, s).end())  # возвращает последний индекс совпадения
# print(re.search(reg, s).group())
# print(re.match(reg, s))  # местоположение первого совпадения с шаблоном в начале строки
# print(re.split(reg, s, 2))  # возвращает список в котором строка разбита по шаблону
#  третий параметр(maxsplit) количество разбиений +1 (лучше не использовать)
# print(re.sub(reg, "!", s, 2))  # 1-шаблон 2-на что менять 3-строка в которой менять 4-кол-во замен(не использовать)

# ======================================================================

# import re
# from sys import flags

# s = "Я ищу совпадения в 2025 году. и я их райду в 2 счёта. Hello_world"
# reg = r"[0-9]"
# reg = r"[А-яЁё]"
# reg = r"[A-Za-z]"
# reg = r"[A-z]"
# reg = r"[.]" # спецсимволы внутри квадратных скобок экранировать не надо кроме []
#  диапазоны и спецсимволы нужно располагать от меньшего к большему по коду символа(точка перед -)
# reg = r"[^0-9]" # циркумфлекс в [] будет искать все кроме того что указано в []
# reg = r"\d"  # только цифры
# reg = r"\D"  # кроме цифр
# reg = r"\s"  # с пробелом
# reg = r"\S"  # без пробела
# reg = r"\w"  # буквы, цифры и _
# reg = r"\W"  # все что не является буквами, цифрами и _
# reg = r"\bсов"  # \b слово начинается на "cов"
# reg = r"сов\b"  # \b слово заканчивается на "cов"
# print(re.findall(reg, s))

# ===================================================================
# задача

# import re
#
# st = "Час в 24-часовом формате от 00 до 23. 2021-06-15Т21:45. Минуты, в диапазоне от 00 до 59. 2021-06-15Т01:09"
# reg1 = "[0-2][0-9]:[0-5][0-9]"
# print(re.findall(reg1, st))
# ====================================================================

# d = "Цифры: 7, +17, -42, 0013, 0.3"
# print(re.findall(r"[+-]?\d+\.?\d*", d))  # ? - может быть может не быть и только один раз
# print(re.findall(r"[+-]?\d+[.\d]*", d))

# ====================================================================

# d = "05-03-1987 # Дата рождения"
#
# print("Дата рождения: ", re.sub(r"\s#.*", "", d))
# print("Дата рождения: ", re.sub(r"-", ".", d))
# print("Дата рождения: ", re.sub(r"-", ".", re.sub(r"\s#.*", "", d)))

# =====================================================================
# задача

# st = "author=Пушкин А.С.; title = Евгений Онегин; price =200; year= 1831"
# # reg1 = r"\w+\s*=\s*\w+[\s\w.]*"
# # тоже самое
# reg1 = r"\w+\s*=[^;]+"
# print(re.findall(reg1, st))
# # тоже самое
# print(re.split("; ", st))
# ==========================================================

# s1 = "12 сентября 2025 года"
# reg1 = r"\d{2,4}"
# reg1 = r"\d{,4}"
# reg1 = r"\d{2,}"
# print(re.findall(reg1, s1))

# =============================================================

# st = "+7 499 456-45-78, +74994564578, 7(499) 456 45 78, 74994564578"
# reg1 = r"\+?7\d{10}"
# print(re.findall(reg1, st))
# ================================================================

# s = "Я ищу совпадения в 2025 году. и я их райду в 2 счёта. Hello_world"
# # reg = r"^\w+\s\w+" # циркумфлекс вначале шаблона без скобок найдет по шаблону в начале строки
# reg = r"\w+\.$"  # доллар в конце шаблона без скобок найдет по шаблону в конце строки
# print(re.findall(reg, s))
# =======================================================================


# def validate_login(login):
#     return re.findall(r"^[A-Za-z0-9_-]{3,16}$", login)
#
#
# print(validate_login("484Python_master"))

# =============================================================
# флаги (flag)

# print(re.findall(r"\w+", "12 + й"))
# print(re.findall(r"\w+", "12 + й", flags=re.ASCII))

# text = "Hello world"
# print(re.findall(r"\w+", text))
# print(re.findall(r"\w+", text, flags=re.DEBUG))

# s = "Я ищу совпадения в 2025 году. и я их райду в 2 счёта. Hello_world"
# reg = r"я"
# print(re.findall(reg, s, re.IGNORECASE))  # проводит проверку игнорируя регистр букв

# text = """
# one
# two
# """
# print(re.findall(r"one.\w+", text, re.DOTALL))  # символ точки включает не только  любой символ, но и перенос на новую строку

# print(re.findall(r"one$", text, re.MULTILINE))

# print(re.findall("""
# [a-z._-]+  # part1
# @          # @
# [a-z.-]+   # part2
# """, "test@mail.ru", re.VERBOSE))  # что б можно было шаблон разделить на части и поставить комментарии

# ======================================================

# text = """Python,
# python,
# PYTHON
# """
# reg1 = "(?i)^python"  # (i) - флаг IGNORECASE
# print(re.findall(reg1, text))

# =================================================================

# text = "<body>Пример жадного соответствия регулярных выражений</body>"
# print(re.findall("<.*>", text))

# text = "<body>Пример ленивого соответствия регулярных выражений</body>"
# print(re.findall("<.*?>", text))
# ================================================================================
# 26.04.25

# import re

# s = "Петр, Ольга и Виталий отлично учатся!"
# reg = "Петр|Ольга|Виталий|Виктор"  # ровный слэш | - оператор или
# print(re.findall(reg, s))
# ======================================================================

# s = "int = 4, float = 4.0f, double = 8.0"
# reg = r"int\s*=\s*\d[.\w+]*|float\s*=\s*\d[.\w+]*"
# то же самое, но короче
# reg = r"(?:int|float)\s*=\s*\d[.\w+]*"
# print(re.findall(reg, s))
# =====================================================================

# s = "5 +7*2 - 4"
# reg = r"\s*([+*-])\s*"
# print(re.split(reg, s))

# ==================================================================
# задача

# a = "28-08-2021"
# pattern = r"(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19[0-9][0-9]|20[0-9][0-9])"
# print(re.findall(pattern, a))

# ========================================================

# s = "Самолет прилетает 10/23/2025. Будем рады вас видеть после 10/24/2025"
# reg = r"(\d{2})/(\d{2})/(\d{4})"
# print(re.sub(reg, r"\2.\1.\3", s))  # 2 1 3 - это номер круглой скобки в шаблоне(regexp)

# ======================================================================

# Рекурсия -


# def elevator(n):
#     if n == 0:  # условие остановки рекурсии (базовый случай)
#         print("Вы в подвале")
#         return
#     print("=>", n)
#     elevator(n-1)  # стек: 5 - 4 - 3 - 2 - 1
#     print(n, end=" ")
#
#
# n1 = 5
# elevator(n1)

# ============================================================================


# def sum_list(lst):
#     res = 0
#     for i in lst:
#         res += i
#     return res


# def sum_list(lst):
#     if len(lst) == 1:
#         return lst[0]
#     else:
#         return lst[0] + sum_list(lst[1:])
#
#
# print(sum_list([1, 3, 5, 7, 9]))

# =============================================================================
# конвертер чисел десятичной в разные системы счисления


# def to_str(n, base):
#     convert = "0123456789ABCDEF"
#     if n < base:
#         return convert[n]
#     else:
#         return to_str(n // base, base) + convert[n % base]
#
#
# print(to_str(254, 16))

# ===================================================================================

# names = ["Adam", ["Bob", ["Chet", "Cat"], "Bard", "Bert"], "Alex", ["Bea", "Bill"], "Ann"]
# print(names[0])
# print(isinstance(names[0], list))  # проверка является ли "Adam" списком (первый параметр: что проверять,
# второй: на что проверить)


# def count_item(item_list):
#     count = 0
#     for item in item_list:
#         if isinstance(item, list):
#             count += count_item(item)
#         else:
#             count += 1
#     return count
#
#
# print(count_item(names))

# =====================================================================================

# Файлы

# f = open(r"C:\project\Python\text.txt")
# print(f)
# print(*f)
# print(f.name)
# print(f.mode)
# print(f.encoding)
# print(f.closed)
# f.close()
# print(f.closed)
# print(f.read(2))
# print(f.read())
# f.close()

# f = open("text1.txt", "w")
# f.write("This is line1\nThis is line2\nThis is line3\n")
# f.close()

# f = open("text1.txt", "r")
# # print(f.read())
# print(f.readline())
# f.close()

# f = open("text1.txt", "r")
# print(f.readlines())
# f.close()

# f = open("text1.txt", "r")  # r - режим чтения если файла нет выдаст ошибку(r - ставится по умолчанию)
# for line in f:
#     print(line)
# f.close()

# f = open("xyz.txt", "w")  # w - запись(очистит файл и запишет данные) если файла нет он его создаст
# f.write("Hello\nWorld")
# f.close()

# f = open("xyz.txt", "a")  # a - до запись(до записывает в конец файла) если файла нет он его создаст
# f.write("\nNew text")
# f.close()  # файл нужно закрывать всегда

# lines = ["This is line1", "This is line2", "This is line3"]
# f = open("xyz.txt", "a")
# f.write("\nNew text")
# f.writelines(lines)  # до запись списка
# f.close()

# f = open("xyz.txt", "w")
# lst = [str(i) for i in range(10, 100, 10)]
# print(lst)
# for ind in lst:
#     f.write(ind + "\t")
# f.close()

# =========================================================================================
# 27.04.25

# f = open("text2.txt", "w")
# f.write("Замена строки в текстовом файле; \nизменить строку в списке;\nЗаписать в файл;\n")
# f.close()

# f = open("text2.txt", "r")
# read_file = f.readlines()
# print(read_file)
# read_file[1] = "Hello World\n"
# f.close()

# f = open("text2.txt", "w")
# f.writelines(read_file)
# f.close()

# ============================================================================

# f = open("text.txt", "w")
# f.write("Hello!")
# f.close()
#
# f = open("text.txt", "r")
# print(f.read(3))
# print(f.tell())  # возвращает позицию условного курсора в файле
# print(f.seek(1))  # перемещает условный курсор в заданную позицию
# print(f.read())
# print(f.tell())
# f.close()

# =======================================================================

# f = open("text.txt", "a")
# print(f.write("I am learning Python"))
# print(f.seek(3))
# print(f.write("-new string-"))
# print(f.tell())
# f.close()

# =====================================================================

# with open("text.txt", "w+") as f:  # контекстный менеджер сам открывает и закрывает файл
#     print(f.write("0123456789"))

# ============================================

# lst = [4.5, 2.8, 3.9, 1.0, 0.3, 4.33, 7.777]
#
#
# def get_line(lt):
#     lt = list(map(str, lt))
#     print(lt)
#     return " ".join(lt)
#
#
# with open("res.txt", "w") as f:
#     f.write(get_line(lst))
#
# print("файл создан")

# ==============================================

# with open("res.txt", "r") as f:
#     num = f.read()
#
# print(num)
# num_list = list(map(float, num.split()))
# res = 1
# for i in num_list:
#     res *= i
#
# print(res)

# ===================================================================
# file_name = "res1.txt"
#
# with open(file_name, "w") as f:
#     f.write("Файл — именованная область данных на носителе информации, используемая как базовый объект взаимодействия"
#             " с данными в операционных системах.")
#
#
# def longest_words(file):
#     with open(file, "r") as text:
#         w = text.read().split()
#         print(w)
#         res = max(w, key=len)
#         lst = [word for word in w if len(word) == res]
#         if len(lst) == 1:
#             return lst[0]
#         return lst
#
#
# print(longest_words(file_name))

# ================================================================================

# text = "Строка №1\nСтрока №2\nСтрока №3\nСтрока №4\nСтрока №5\nСтрока №6\nСтрока №7\nСтрока №8\nСтрока №9\nСтрока №10"
#
# with open("one.txt", "w") as f:
#     f.write(text)

# with open("one.txt", "r") as fr, open("two.txt", "w") as fw:
#     for line in fr:
#         line = line.replace("Строка", "Линия -")
#         fw.write(line)
# ======================================================================
# модуль OS и OS.PATH

# import os

# print(os.getcwd())
# print(os.listdir())
# print(os.listdir("folder"))
# os.mkdir("folder1")
# os.makedirs("nested1/nested2/nested3")
# os.rmdir("folder")
# os.remove("xyz.txt")
# os.rename("two.txt", "two_new.txt")
# os.rename("two_new.txt", "folder/two_new2.txt")  # перемещение только в существующую папку
# os.renames("two_new.txt", "folder/two_new2.txt")  # перемещение создает папку

# for root, dirs, files in os.walk("nested1"):
#     print("Root:", root)
#     print("\tDirs:", dirs)
#     print("\tFiles:", files)

# ====================================================================


# def remove_empty_dirs(root_tree):
#     print(f"Удаление пустых директорий в ветви {root_tree}")
#     print("-" * 50)
#     for root, dirs, files in os.walk(root_tree):
#         if not os.listdir(root):
#             os.rmdir(root)
#             print(f"Директория {root} удалена")
#     print("-" * 50)
#
#
# remove_empty_dirs("nested1")

# ===================================================================

# import os.path
#
# print(os.path.split(r"folder\folder2\folder3\file.txt"))
# print(os.path.join("folder", "folder2", "folder3", "file.txt"))
# print(os.path.isdir(r"folder\folder2\folder3"))
# print(os.path.isfile(r"folder\folder2\folder3\file.txt"))

# ======================================================================

# dirs = [r"Work\F1", r"Work\F2\F21"]
# for d in dirs:
#     os.makedirs(d)

# files = {
#     "Work": ["w.txt"],
#     r"Work\F1": ["f11.txt", "f12.txt", "f13.txt"],
#     r"Work\F2\F21": ["f21.txt", "f212.txt"]
# }
#
# for d, f in files.items():
#     for file in f:
#         file_path = os.path.join(d, file)
#         open(file_path, "w").close()
#
# files_with_text = [r"Work\w.txt", r"Work\F1\f12.txt", r"Work\F2\F21\f21.txt", r"Work\F2\F21\f212.txt"]
#
# for file in files_with_text:
#     with open(file, "w") as f:
#         f.write(f"Какой-то текст в файле {file}")
#
#
# def print_tree(root, topdown):
#     print(f"Обход {root} {"сверху вниз"if topdown else "снизу вверх"}")
#     for root, dirs, my_file in os.walk(root, topdown):
#         print(root)
#         print(dirs)
#         print(my_file)
#     print("-" * 50)
#
#
# print_tree("Work", False)
# print_tree("Work", True)

# ============================================================================
# 10.05.25
# import os
# import time
#
# path = r"main.py"
# kb = os.path.getsize(path)  # размер файла в байтах
# print(kb // 1024)  # в килобайтах
# atime = os.path.getatime(path)  # дата последнего доступа к документу
# ctime = os.path.getctime(path)  # создание файла или время последнего изменения
# mtime = os.path.getmtime(path)  # время последнего изменения файла
#
# print(atime)
# print(ctime)
# print(mtime)
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(atime)))  # перевод в нормальное время
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(ctime)))
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(mtime)))

# ====================================================================================================================

# Обьектно ореентированное програмирование


# class Point:  # класс
#     """Класс для предоставления координат точек на плоскости - описание(документирование)"""
#     x = 1  # свойство класса
#     y = 2
#
#     def set_coords(self, x1, y1):  # self - это ссылка на экземпляр класса
#         self.x = x1
#         self.y = y1
#         print("Метод")
#         print(self.__dict__)
#
#
# p1 = Point()  # вызов экземпляра класса
# # p1.x = 100  # перезапись свойства экземпляра класса только для этого экземпляра значения в самом классе не изменятся
# # print(p1.x, p1.y)  # обращение к свойству класса
# p1.set_coords(100, 200)
#
# p2 = Point()
# p2.set_coords(111, 222)
# print(p2.x, p2.y)

# ===========================================================================


# class Human:
#     name = "name"
#     birthday = "00.00.0000"
#     phone = "00-00-00"
#     country = "country"
#     city = "city"
#     address = "street, house"
#
#     def print_info(self):
#         print(" Персональные данные ".center(40, "*"))
#         print(f"Имя: {self.name}")
#         print(f"Дата рождения: {self.birthday}")
#         print(f"Номер телефона: {self.phone}")
#         print(f"Страна: {self.country}")
#         print(f"Город: {self.city}")
#         print(f"Адрес: {self.address}")
#         print("=" * 40)
#
#     def input_info(self, first_name, birthday, phone, country, city, address):
#         self.name = first_name
#         self.birthday = birthday
#         self.phone = phone
#         self.country = country
#         self.city = city
#         self.address = address
#
#     def set_name(self, name):
#         self.name = name
#
#     def get_name(self):
#         return self.name
#
#
# h1 = Human()
# h1.print_info()
# h1.input_info("Юля", "23.05.1986", "45-46-98", "Россия", "Москва", "Чистопрудный 123")
# h1.print_info()
# h1.set_name("Анна")
# h1.print_info()
# print(h1.get_name())

# ==============================================================================


# class Person:
#     skill = 10
#
#     def __init__(self, name, surname):
#         self.name = name  # динамические свойства
#         self.surname = surname
#         print("Инициализатор")
#
#     def __del__(self):
#         print("Финализатор (деструктор)")
#
#     def print_info(self, name, surname):
#         print("\nДанные сотрудника:", self.name, self.surname)
#
#     def add_skill(self, k):
#         self.skill += k
#         print("Квалификация сотрудника:", self.skill)
#
#
# p1 = Person("Виктор", "Резник")
# p1.print_info()
# p1.add_skill(3)
# del p1
#
# p2 = Person("Анна", "Долгих")
# p2.print_info()
# p2.add_skill(2)

# ===========================================================


# class Point:
#     count = 0
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#         Point.count += 1
#
#
# p1 = Point(1, 2)
# p2 = Point(10, 20)
# p3 = Point(100, 200)
# print(Point.count)

# print(p1.__dict__)
# print(p2.__dict__)
# print(p3.__dict__)

# =========================================================


# class Robot:
#     k = 0
#
#     def __init__(self, name):
#         self.name = name
#         print("Инициализация робота:", self.name)
#         Robot.k += 1
#
#     def say_hi(self):
#         print("Приветствую! Меня зовут:", self.name)
#
#     def __del__(self):
#         print(self.name, "выключается")
#         Robot.k -= 1
#
#         if Robot.k == 0:
#             print(self.name, "был последним")
#         else:
#             print("Работающих роботов осталось:", Robot.k)
#
#
# droid1 = Robot("R2-D2")
# droid1.say_hi()
# print("Численность роботов:", Robot.k)
#
# droid2 = Robot("C-3PO")
# droid2.say_hi()
# print("Численность роботов:", Robot.k)
#
# print("\nЗдесь роботы могут проделать какую-то работу.\n")
#
# print("Роботы закончили свою работу. Давайте их выключим.")
#
# del droid1
# del droid2
#
# print("Численность роботов:", Robot.k)

# ==========================================================================

# Модификаторы доступа
# public - открытые self.x
# protected - self._x
# private - закрытое self.__x  за пределами класса доступ не получить


# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def get_coord(self):
#         return self.__x, self.__y
#
#     def __check_value(c):
#         if isinstance(c, (int, float)):
#             return True
#         return False
#
#     def set_coord(self, x, y):
#         if (isinstance(x, int) or isinstance(x, float)) and (isinstance(y, int) or isinstance(y, float)):
#             self.__x = x
#             self.__y = y
#         else:
#             print("Координаты должны быть числами")
#
#
# p1 = Point(5, 10)
# # p1.set_coord(1, 3)
# print(p1.get_coord())

# ==========================================
# 15.05.25

# __slots__ - установка допустимых свойств в классе


# class Point:
#     __slots__ = ["__x", "__y"]  # то же: ("__x", "__y"); "__x", "__y"
#
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def get_coord(self):
#         return self.__x, self.__y
#
#     def __check_value(c):
#         if isinstance(c, (int, float)):
#             return True
#         return False
#
#     def set_coord(self, x, y):
#         if (isinstance(x, int) or isinstance(x, float)) and (isinstance(y, int) or isinstance(y, float)):
#             self.__x = x
#             self.__y = y
#         else:
#             print("Координаты должны быть числами")
#
#
# p1 = Point(5, 10)
# # p1.set_coord(1, 3)
# print(p1.get_coord())

# =============================================================


# class Point:
#     def __init__(self, x, y):
#             self.__x = x
#             self.__y = y
#
#     def __set_x(self, x):
#         print("Вызов __set_x")
#         self.__x = x
#
#     def __get_x(self):
#         print("Вызов __get_x")
#         return self.__x
#
#     x = property(__get_x, __set_x)  # декоратор метода (старый подход)
#
#
# p1 = Point(5, 10)
# print(p1.x)
# p1.x = 50
# print(p1.x)

#  ===============================
# современный подход:


# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     @property   # декоратор get должен быть выше setter
#     def x(self):
#         print("Вызов __get_x")
#         return self.__x
#
#     @x.setter  # декоратор set
#     def x(self, x):
#         print("Вызов __set_x")
#         self.__x = x
#
#     @x.deleter  # декоратор удаления свойства
#     def x(self):
#         print("удаление свойства")
#         del self.__x
#
#
# p1 = Point(5, 10)
# p1.x = 50
# del p1.x
# print(p1.x)

# =====================================================
# конвертор кг в фунты


# class KgToPounds:
#     def __init__(self, kg):
#         self.__kg = kg
#
#     @property
#     def kg(self):
#         return self.__kg
#
#     @kg.setter
#     def kg(self, new_kg):
#         if isinstance(new_kg, (int, float)):
#             self.__kg = new_kg
#         else:
#             print("килограммы задаются числами")
#
#     def to_pound(self):
#         return self.__kg * 2.205
#
#
# w = KgToPounds(12)
# print(w.kg, "кг =>", w.to_pound(), "фунтов")
# w.kg = 41
# print(w.kg, "кг =>", w.to_pound(), "фунтов")

# ==============================================


# class Point:
#     __count = 0
#
#     def __init__(self, x=0, y=0):
#         self.x = x
#         self.y = y
#         Point.__count += 1
#
#     @staticmethod  # статический метод
#     def get_count():
#         return Point.__count
#
#
# p1 = Point()
# p2 = Point()
# p3 = Point()
# print(Point.get_count())

# ===============================================


# def inc(x):
#     return x + 1
#
#
# def dec(x):
#     return x - 1
#
#
# print(inc(10), dec(10))

# ==========

# class Change:
#     @staticmethod
#     def inc(x):
#         return x + 1
#
#     @staticmethod
#     def dec(x):
#         return x - 1
#
#     def print_info(self):
#         print("Печать информации")
#
#
# print(Change.inc(10), Change.dec(10))

# =================================================================


# class Numbers:
#     @staticmethod
#     def max(a, b, c, d):
#         mx = a
#         if b > mx:
#             mx =b
#         if c > mx:
#             mx = c
#         if d > mx:
#             mx = d
#         return mx
#
#     @staticmethod
#     def min(*args):
#         mn = args[0]
#         for i in args:
#             if i < mn:
#                 mn = i
#         return mn
#
#     @staticmethod
#     def average(*args):
#         return sum(args) / len(args)
#
#     @staticmethod
#     def factorial(n):
#         fact = 1
#         for i in range(1, n + 1):
#             fact *= i
#         return fact
#
#
# print(Numbers.max(3, 4, 7, 9))
# print(Numbers.min(3, 4, 7, 9))
# print(Numbers.average(3, 5, 7, 9))
# print(Numbers.factorial(5))

# ========================================================


# class Date:
#     def __init__(self, day, month, year):
#         self.day = day
#         self.month = month
#         self.year = year
#
#     def string_to_db(self):
#         return f"{self.year}-{self.month}-{self.day}"
#
#     @classmethod
#     def from_string(cls, string_date):
#         day, month, year = map(int, string_date.split("."))
#         date = Date(day, month, year)
#         return date
#
#     @staticmethod
#     def is_date_valid(string_date):
#         if string_date.count(".") == 2:
#             day, month, year = map(int, string_date.split("."))
#             return day <= 31 and month <= 12 and year <= 3999
#
#
# dates = [
#     "23.10.2025",
#     "30-12-2025",
#     "01.01.2025",
#     "12.31.2025"
# ]
#
# for i in dates:
#     if Date.is_date_valid(i):
#         date1 = Date.from_string(i)
#         print(date1.string_to_db())
#     else:
#         print("Неправильная дата или формат строки")

# date1 = Date.from_string("23.10.2025")
# print(date1.string_to_db())


# string_date = "23.10.2025"
# day, month, year = map(int, string_date.split("."))
# print(day, month, year)
# date = Date(day, month, year)
# print(date.string_to_db())

# ================================================================================

# 17.05.25


# class Account:
#     rate_usd = 0.013
#     rate_eur = 0.011
#     suffix = "RUB"
#     suffix_usd = "USD"
#     suffix_eur = "EUR"
#
#     def __init__(self, surname, num, percent, value):
#         self.surname = surname
#         self.num = num
#         self.percent = percent
#         self.value = value
#         print(f"Счет #{self.num} принадлежащий {self.surname} был открыт.")
#         print("*" * 50)
#
#     def __del__(self):
#         print("*" * 50)
#         print(f"Счет #{self.num} принадлежащий {self.surname} был закрыт")
#
#     @staticmethod
#     def convert(value, rate):
#         return value * rate
#
#     @classmethod
#     def set_usd_rate(cls, rate):
#         cls.rate_usd = rate
#
#     @classmethod
#     def set_eur_rate(cls, rate):
#         cls.rate_eur = rate
#
#     def print_balance(self):
#         print(f"Текущий баланс {self.value} {Account.suffix}")
#
#     def convert_to_usd(self):
#         usd_val = Account.convert(self.value, Account.rate_usd)
#         print(f"Состояние счета: {usd_val} {Account.suffix_usd}")
#
#     def convert_to_eur(self):
#         eur_val = Account.convert(self.value, Account.rate_eur)
#         print(f"Состояние счета: {eur_val} {Account.suffix_eur}")
#
#     def edit_owner(self, surname):
#         self.surname = surname
#
#     def add_percent(self):
#         self.value += self.value * self.percent
#         print("Проценты были успешно начислены")
#         self.print_balance()
#
#     def withdraw_money(self, val):
#         if val > self.value:
#             print(f"к сожалению у вас нет {val} {Account.suffix}")
#         else:
#             self.value -= val
#             print(f"{val} {Account.suffix} было снято!")
#
#         self.print_balance()
#
#     def add_money(self, val):
#         self.value += val
#         print(f"{val} {Account.suffix} было успешно добавлено!")
#         self.print_balance()
#
#     def prin_info(self):
#         print("Информация о счете:")
#         print("-" * 20)
#         print(f"#{self.num}")
#         print(f"Владелец: {self.surname}")
#         self.print_balance()
#         print(f"Проценты: {self.percent:.0%}")
#         print("-" * 20)
#
#
# acc = Account("Долгих", "12345", 0.03, 1000)
# # acc.print_balance()
# acc.prin_info()
# acc.convert_to_usd()
# acc.convert_to_eur()
# print()
# Account.set_usd_rate(2)
# acc.convert_to_usd()
# Account.set_eur_rate(3)
# acc.convert_to_eur()
# print()
# acc.edit_owner("Дюма")
# acc.prin_info()
# print()
# acc.add_percent()
# print()
# acc.withdraw_money(100)
# print()
# acc.withdraw_money(3000)
# print()
# acc.add_money(5000)
# print()
# acc.withdraw_money(3000)
# print()

# ====================================================================================
# import re
#
#
# class UserData:
#     def __init__(self, fio, old, ps, weight):
#         self.fio = fio
#         self.old = old
#         self.password = ps
#         self.weight = weight
#
#     @staticmethod
#     def verify_fio(fio):
#         if not isinstance(fio, str):
#             raise TypeError("ФИО должно быть строкой")
#         f = fio.split()
#         if len(f) != 3:
#             raise TypeError("Неверный формат ФИО")
#         letters = "".join(re.findall("[a-zа-яё-]", fio, re.IGNORECASE))
#         for s in f:
#             if len(s.strip(letters)) != 0:
#                 raise TypeError("В ФИО можно использовать только буквы и дефис")
#
#     @staticmethod
#     def verify_old(old):
#         if not isinstance(old, int) or old < 14 or old > 70:
#             raise TypeError("Возраст должен быть числом в диапазоне от 14 до 70 лет")
#
#     @staticmethod
#     def verify_weight(w):
#         if not isinstance(w, float) or w < 20:
#             raise TypeError("вес должен быть вещественным числом от 20 кг и выше")
#
#     @staticmethod
#     def verify_ps(ps):
#         if not isinstance(ps, str):
#             raise TypeError("Паспорт должен быть строкой")
#         s = ps.split()
#         if len(s) != 2 or len(s[0]) != 4 or len(s[1]) != 6:
#             raise TypeError("Неверный формат паспорта")
#         for p in s:
#             if not p.isdigit():
#                 raise TypeError("Серия и номер паспорта должны быть числами")
#
#     @property
#     def fio(self):
#         return self.__fio
#
#     @fio.setter
#     def fio(self, fio):
#         self.verify_fio(fio)
#         self.__fio = fio
#
#     @property
#     def old(self):
#         return self.__old
#
#     @old.setter
#     def old(self, year):
#         self.verify_old(year)
#         self.__old = year
#
#     @property
#     def password(self):
#         return self.__password
#
#     @password.setter
#     def password(self, ps):
#         self.verify_ps(ps)
#         self.__password = ps
#
#     @property
#     def weight(self):
#         return self.__weight
#
#     @weight.setter
#     def weight(self, w):
#         self.verify_weight(w)
#         self.__weight = w
#
#
# p1 = UserData("Волков Игорь Николаевич", 26, "1234 567890", 80.8)

# ====================================================================================


# class Point:
#     __count = 0
#
#     def __init__(self, x=0, y=0):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp, ep, color="red", width=1):
#         print("Инициализатор базового класса Prop")
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#
# class Line(Prop):
#     def __init__(self, *args):
#         print("Переопределенный инициализатор класса Line")
#         # Prop.__init__(self, * args)
#         super().__init__(*args)
#
#     def draw_line(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Rect(Prop):
#     def draw_rect(self):
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# line = Line(Point(1, 2), Point(10, 20))
# line.draw_line()
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()

# ===========================================================================

# 18.05.25


# class Figure:
#     def __init__(self, color):
#         self.__color = color
#
#     @property
#     def color(self):
#         return self.__color
#
#     @color.setter
#     def color(self, c):
#         self.__color = c
#
#
# class Rectangle(Figure):
#     def __init__(self, width, height, color):
#         super().__init__(color)
#         self.width = width
#         self.height = height
#
#     @property
#     def width(self):
#         return self.__width
#
#     @width.setter
#     def width(self, w):
#         if w > 0:
#             self.__width = w
#         else:
#             raise ValueError("Ширина должна быть больше 0")
#
#     @property
#     def height(self):
#         return self.__height
#
#     @height.setter
#     def height(self, h):
#         if h > 0:
#             self.__height = h
#         else:
#             raise ValueError("Ширина должна быть больше 0")
#
#     def area(self):
#         return self.__width * self.__height
#
#     def print_info(self):
#         print(f"Прямоугольник\nШирина: {self.__width}\nВысота: {self.__height}\nЦвет: {self.color}\n"
#               f"Площадь: {self.area()}")
#
#
# rect = Rectangle(10, 20, "green")
# rect.print_info()

# ======================================================


# class Rect:
#     def __init__(self, width, height):
#         self.width = width
#         self.height = height
#
#     def show_rect(self):
#         print(f"Прямоугольник:\nШирина: {self.width}\nВысот: {self.height}")
#
#
# class RecFon(Rect):
#     def __init__(self, width, height, background):
#         self.fon = background
#         super().__init__(width, height)
#
#     def show_rect(self):
#         super().show_rect()
#         print("Фон:", self.fon)
#
#
# class RectBorder(Rect):
#     def __init__(self, width, height,width1, types, color):
#         super().__init__(width, height)
#         self.width1 = width1
#         self.type = types
#         self.color = color
#
#     def show_rect(self):
#         super().show_rect()
#         print(f"Рамка: {self.width1} {self.type} {self.color}")
#
#
# shape1 = RecFon(400, 200, "yellow")
# shape1.show_rect()
# shape2 = RectBorder(600, 300, "1px", "solid", "red")
# shape2.show_rect()

# ====================================================


# class Vector(list):
#     def __str__(self):
#         return " ".join(map(str, self))
#
#
# v = Vector([1, 2, 3])
# print(v)


# ========================================================
# Перегрузка методов


# class Point:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def set_coord(self, x=None, y=None):
#         if y is None:
#             self.x = x
#         elif x is None:
#             self.y = y
#         else:
#             self.x = x
#             self.y = y
#
#
# p1 = Point(1, 2)
# print(p1.__dict__)
# p1.set_coord(10, 20)
# print(p1.__dict__)
# p1.set_coord(100)
# print(p1.__dict__)
# p1.set_coord(y=200)
# print(p1.__dict__)

# ==============================================================

# Абстрактные метод и класс


# class Point:
#     def __init__(self, x=0, y=0):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self) -> str:
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1) -> None:
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw(self):
#         raise NotImplementedError("В дочернем классе должен быть определен метод draw()")
#
#
# class Line(Prop):
#     def draw(self) -> None:
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Rect(Prop):
#     def draw(self) -> None:
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Ellipse(Prop):
#     def draw(self) -> None:
#         print(f"Рисование эллипса: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# figs = list()
# figs.append(Line(Point(0, 0), Point(10, 20)))
# figs.append(Line(Point(10, 10), Point(20, 30)))
# figs.append(Rect(Point(50, 50), Point(100, 100)))
# figs.append(Ellipse(Point(70, 70), Point(200, 200)))
#
# for f in figs:
#     f.draw()

# ========================================================

# from abc import ABC, abstractmethod


# class Chess(ABC):
#     def draw(self):
#         print("Нарисовал шахматную фигуру")
#
#     @abstractmethod
#     def move(self):
#         pass
#
#
# class Queen(Chess):
#     def move(self):
#         print("Ферзь перемещен на е2 е4")
#
#
# q = Queen()
# q.draw()
# q.move()

# ===========================================
# from math import pi
#
#
# class Table:
#     def __init__(self, width=None, length=None, radius=None):
#         if radius is None:
#             if length is None:
#                 self.width = self.length = width
#             else:
#                 self.width = width
#                 self.length = length
#         else:
#             self.radius = radius
#
#     def calc_area(self):
#         raise NotImplementedError("В дочернем классе должен быть определен метод calc_area()")
#
#
# class SquareTable(Table):
#     def calc_area(self):
#         return self.width * self.length
#
#
# class RoundTable(Table):
#     def calc_area(self):
#         return round(pi * self.radius ** 2)
#
#
# t = SquareTable(20, 10)
# print(t.calc_area())
#
# t2 = SquareTable(20)
# print(t2.calc_area())
#
# t1 = RoundTable(radius=20)
# print(t1.calc_area())

# =================================================================
# from abc import ABC, abstractmethod
#
#
# class Currency(ABC):
#     suffix = "RUB"
#
#     def __init__(self, value):
#         self.value = value
#
#     @abstractmethod
#     def convert_to_rub(self):
#         pass
#
#     @abstractmethod
#     def print_value(self):
#         print(self.value, end=" ")
#
#     def print_info(self):
#         self.print_value()
#         print(f" = {self.convert_to_rub():.2f} {Currency.suffix}")
#
#
# class Dollar(Currency):
#     rate_to_rub = 71.16
#     suffix = "USD"
#
#     def convert_to_rub(self):
#         return self.value * Dollar.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Dollar.suffix, end=" ")
#
#
# class Euro(Currency):
#     rate_to_rub = 90.14
#     suffix = "EUR"
#
#     def convert_to_rub(self):
#         return self.value * Euro.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Euro.suffix, end=" ")
#
#
# d = [Dollar(5), Dollar(10), Dollar(50), Dollar(100)]
# e = [Euro(5), Euro(10), Euro(50), Euro(100)]
#
# print("*" * 50)
#
# for elem in d:
#     elem.print_info()
#
# print("*" * 50)
#
# for elem in e:
#     elem.print_info()

# ==============================================================
# Интерфейсы - клас с набором абстрактных методов

# from abc import ABC, abstractmethod
#
#
# class Father(ABC):
#     @abstractmethod
#     def display1(self):
#         pass
#
#     @abstractmethod
#     def display2(self):
#         pass
#
#
# class Child(Father):
#     def display1(self):
#         print("display1")
#
#
# class GrandChild(Child):
#     def display2(self):
#         print("display2")
#
#
# gc = GrandChild()
# gc.display2()
# gc.display1()

# ==================================================================================

# 24.05.25


# Вложенные классы


# class MyOuter:
#     age = 18
#
#     def __init__(self, name):
#         self.name = name
#
#     @staticmethod
#     def outer_static_method():
#         print("Метод наружного класса")
#
#     def other_obj_method(self):
#         print("Метод экземпляра наружного класса")
#
#     class MyInner:
#         def __init__(self, inner_name, obj):
#             self.inner_name = inner_name
#             self.obj = obj
#
#         def inner_method(self):
#             print("метод во внутреннем классе", MyOuter.age, self.obj.name)
#             MyOuter.outer_static_method()
#             self.obj.other_obj_method()
#
#
# out = MyOuter("Внешний")
# inner = out.MyInner("Внутренний", out)  # обращение к внутреннему классу
# print(inner.inner_name)
# inner.inner_method()

# ===============================================================


# class LightGreen:
#     def __init__(self):
#         self.name = "Light Green"
#
#     def display(self):
#         print("Name:", self.name)
#
#
# class Color:
#     def __init__(self):
#         self.name = "Green"
#         self.lg = LightGreen()
#         self.dg = self.DarkGreen()
#
#     def show(self):
#         print("Name:", self.name)
#
#     class DarkGreen:
#         def __init__(self):
#             self.name = "Dark Green"
#
#         def display(self):
#             print("Name:", self.name)
#
#
# outer = Color()
# outer.show()
# print(outer.name)
# g = outer.lg
# g.display()
# d = outer.dg
# d.display()

# ====================================================================================

#
# class Computer:
#     def __init__(self):
#         self.name = "PC001"
#         self.os = self.OS()
#         self.cpu = self.CPU()
#
#     class OS:
#         def system(self):
#             return "Windows 11"
#
#     class CPU:
#         def make(self):
#             return "Intel"
#
#         def model(self):
#             return "Core-i9"
#
#
# comp = Computer()
# my_os = comp.os
# my_cpu = comp.cpu
# print(comp.name)
# print(my_os.system())
# print(my_cpu.make())
# print(my_cpu.model())

# ==== то же самое =================


# class Computer:
#     def __init__(self):
#         self.name = "PC001"
#
#     class OS:
#         def system(self):
#             return "Windows 11"
#
#     class CPU:
#         def make(self):
#             return "Intel"
#
#         def model(self):
#             return "Core-i9"
#
#
# comp = Computer()
# my_os = Computer.OS()
# my_cpu = Computer.CPU()
# print(comp.name)
# print(my_os.system())
# print(my_cpu.make())
# print(my_cpu.model())

# ================================================================================================
# вспомогательные методы(магические)

# class Cat:
#     def __init__(self, name):  # инициализатор
#         self.name = name
#
#     def __repr__(self):  # возвращает строковое представление объекта (более технический вид чем __str__)
#         return f"{self.__class__}: {self.name}"  # __class__ - обращение к классу
#
#     def __str__(self):  # возвращает строковое значение (для пользователя)
#         return f"{self.name}"
#
#
# cat = Cat("Пушок")
# print(cat)

# ===================================


# class Point:
#     def __init__(self, *args):
#         self.__coord = args
#
#     def __len__(self):  # длина
#         return len(self.__coord)
#
#
# p = Point(5, 7)
# print(len(p))

# =====================================
# import math
#
#
# class Point:
#     __slots__ = ("x", "y", "__length")  # разрешенные атрибуты
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#         self.length = math.sqrt(x * x * y * y)
#
#     @property
#     def length(self):
#         return self.__length
#
#     @length.setter
#     def length(self, value):
#         self.__length = value
#
#
# p1 = Point(10, 20)
# print(p1.length)

# =============================================


# class Point:
#     __slots__ = ("x", "y")  # разрешенные атрибуты
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point2D:
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# pt1 = Point(1, 2)
# pt2 = Point2D(1, 2)
# print("pt1 =", pt1.__sizeof__())
# print("pt2 =", pt2.__sizeof__() + pt2.__dict__.__sizeof__())

# =================================================================

#
# class Point:  # __slots__ не наследуется в дочернем классе
#     __slots__ = ("x", "y")
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point3D(Point):  # __slots__ не наследуется в дочернем классе
#     __slots__ = "z"
#
#     def __init__(self, x, y, z):
#         super().__init__(x, y)
#         self.z = z
#
#
# pt = Point(1, 2)
# pt3 = Point3D(10, 20, 30)
# print(pt3.x, pt3.y, pt3.z)

# ==========================================================================

# множественное наследование


# class Creature:
#     def __init__(self, name):
#         self.name = name
#
#
# class Animal(Creature):
#     def sleep(self):
#         print(self.name + " is slipping")
#
#
# class Pet(Creature):
#     def play(self):
#         print(self.name + " is playing")
#
#
# class Dog(Animal, Pet):
#     def bark(self):
#         print(self.name + " is barking")
#
#
# dog = Dog("Buddy")
# dog.sleep()
# dog.play()
# dog.bark()

# ======================================


# class A:
#     def __init__(self):
#         print("init A")
#
#
# class AA:
#     def __init__(self):
#         print("init AA")
#
#
# class B(A):
#     def __init__(self):
#         print("init B")
#
#
# class C(AA):
#     def __init__(self):
#         print("init C")
#
#
# class D(B, C):
#     def __init__(self):
#         print("init D")
#
#
# d = D()
# print(D.mro())  #
# print(D.__mro__)

# =================================================

#
# class Point:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def __str__(self):
#         return f"({self.x}, {self.y})"
#
#
# class Styles:
#     def __init__(self, color="red", width=1):
#         print("Init Styles")
#         self.color = color
#         self.width = width
#
#
# class Pos:
#     def __init__(self, sp: Point, ep: Point, *args):
#         print("Init Pos")
#         self.sp = sp
#         self.ep = ep
#         # Styles.__init__(self, *args)
#         super().__init__(*args)
#
#
# class Line(Pos, Styles):
#     def draw(self):
#         print(f"Рисование линии: {self.sp} {self.ep} {self.color} {self.width}")
#
#
# l1 = Line(Point(10, 10), Point(100, 100), "green", 5)
# l1.draw()

# ======================================================================================================

# Миксины


# class Goods:
#     def __init__(self, name, weight, price):
#         print("Init Goods")
#         self.name = name
#         self.weight = weight
#         self.price = price
#         super().__init__()
#
#     def print_info(self):
#         print(f"{self.name} {self.weight} {self.price}")
#
#
# class MixinLog:
#     ID = 0
#
#     def __init__(self):
#         print("Init MixinLog")
#         MixinLog.ID += 1
#         self.id = MixinLog.ID
#
#     def save_sell_log(self):
#         print(f"{self.id}: товар был продан в 15:54 часов")
#
#
# class NoteBook(Goods, MixinLog):
#     pass
#
#
# n = NoteBook("HP", 1.5, 35000)
# n2 = NoteBook("HP", 1.5, 35000)
# n.print_info()
# n.save_sell_log()
# n2.save_sell_log()

# =========================================================================

# перегрузка операторов


# class Clock:
#     __DAY = 86400
#
#     def __init__(self, sec: int):
#         if not isinstance(sec, int):
#             raise ValueError("Секунды должны быть целым числом")
#         self.sec = sec % self.__DAY
#
#     def get_format_time(self):
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#         return f"{Clock.get_form(h)}:{Clock.get_form(m)}:{Clock.get_form(s)}"
#
#     @staticmethod
#     def get_form(x):
#         return str(x) if x > 9 else "0" + str(x)
#
#     def __add__(self, other):  # переопределение того как будет работать оператор "+"
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом данных Clock")
#         return Clock(self.sec + other.sec)
#
#     def __eq__(self, other):  # переопределение того как будет работать "=="
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом данных Clock")
#         return self.sec == other.sec
#
#     def __ne__(self, other):  # переопределение "!="
#         return not self.__eq__(other)
#
#     def __getitem__(self, item):
#         if not isinstance(item, str):
#             raise ValueError("Ключ должен быть строкой")
#
#         if item == "hour":
#             return (self.sec // 3600) % 24
#         if item == "min":
#             return (self.sec // 60) % 60
#         if item == "sec":
#             return self.sec % 60
#
#         return "Неверный ключ"
#
#     def __setitem__(self, key, value):
#         if not isinstance(key, str):
#             raise ValueError("Ключ должен быть строкой")
#         if not isinstance(value, int):
#             raise ValueError("Значение должно быть целым числом")
#
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#
#         if key == "hour":
#             self.sec = s + 60 * m + value * 3600
#         if key == "min":
#             self.sec = s + 60 * value + h * 3600
#         if key == "sec":
#             self.sec = value + 60 * m + h * 3600
#
#
# c1 = Clock(80000)
# print(c1.get_format_time())
#
# print(c1["hour"], c1["min"], c1["sec"])
# c1["hour"] = 14
# c1["min"] = 20
# c1["sec"] = 34
# print(c1.get_format_time())
# c1 = Clock(100)
# c2 = Clock(200)
# c4 = Clock(300)
# c3 = c1 + c2 + c4
# print(c1.get_format_time())
# print(c2.get_format_time())
# print(c4.get_format_time())
# print(c3.get_format_time())
# if c1 == c2:
#     print("Время одинаковое")
# else:
#     print("Время разное")
# if c1 != c2:
#     print("Время разное")
# else:
#     print("Время одинаковое")

# ============================================================================================

# 25.05.25


# class Student:
#     def __init__(self, name, *marks):
#         self.name = name
#         self.marks = list(marks)  # в marks будет приходить как кортеж поэтому преобразуем в список
#
#     def __getitem__(self, item):  # переопределение []
#         if 0 <= item < len(self.marks):
#             return self.marks[item]
#         else:
#             raise IndexError("Неверный индекс")
#
#     def __setitem__(self, key, value):  # для перезаписи нужен __setitem__
#         if not isinstance(key, int) or key < 0:
#             raise TypeError("Индекс должен быть целым положительным числом")
#
#         if key >= len(self.marks):
#             off = key + 1 - len(self.marks)  # 10 + 1 - 5 => 6
#             self.marks.extend([None] * off)  # [5, 5, 3, 4, 5, None, None, None, None, None, None]
#
#         self.marks[key] = value  # [5, 5, 3, 4, 5, None, None, None, None, None, 4]
#
#     def __delitem__(self, key):
#         if not isinstance(key, int):
#             raise TypeError("Индекс должен быть целым числом")
#
#         del self.marks[key]
#
#
# s1 = Student("Sergey", 5, 5, 3, 4, 5)
# print(s1.marks[2])  # то же, что и ниже
# print(s1[2])  # что б так срабатывало нужен __getitem__
# s1[2] = 4  # для перезаписи нужен __setitem__
# s1[10] = 4  # [5, 5, 3, 4, 5, None, None, None, None, None, 4]
# del s1[2]  # для удаления нужен __delitem__
#
# print(s1.marks)

# ===============================================================================
# from random import choice, randint
#
#
# class Cat:
#     def __init__(self, name, age, pol):
#         self.name = name
#         self.age = age
#         self.pol = pol
#
#     def __str__(self):
#         if self.pol == "M":
#             return f"{self.name} is good boy!!!"
#         elif self.pol == "F":
#             return f"{self.name} is good girl!!!"
#         else:
#             return f"{self.name} is good kitty!!!"
#
#     def __repr__(self):
#         return f"Cat(name='{self.name}', age={self.age}, pol='{self.pol}')"
#
#     def __add__(self, other):
#         if self.pol != other.pol:
#             return [Cat("not name", 0, choice(["M", "F"])) for _ in range(1, randint(2, 6))]
#         else:
#             raise TypeError("Types are not supported!")
#
#
# cat1 = Cat("Tom", 4, "M")
# cat2 = Cat("Elsa", 5, "F")
# cat3 = Cat("Murzik", 3, "M")
# print(cat1)
# print(cat2)
# print(cat3)
# print(cat1 + cat2)

# ==============================================================================================================

# Полиморфизм


# class Rectangle:
#     def __init__(self, w, h):
#         self.w = w
#         self.h = h
#
#     def perimetr(self):
#         return 2 *(self.w + self.h)
#
#
# class Square:
#     def __init__(self, a):
#         self.a = a
#
#     def perimetr(self):
#         return 4 * self.a
#
#
# class Triangle:
#     def __init__(self, a, b, c):
#         self.a = a
#         self.b = b
#         self.c = c
#
#     def perimetr(self):
#         return self.a + self.b + self.c
#
#
# r1 = Rectangle(1, 2)
# r2 = Rectangle(3, 4)
#
# s1 = Square(10)
# s2 = Square(20)
#
# t1 = Triangle(1, 2, 3)
# t2 = Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]
#
# for g in shape:
#     print(g.perimetr())

# ===========================================================================

# 31.05.25


# Функторы


# class Counter:
#     def __init__(self):
#         self.__count = 0
#
#     def __call__(self, *args, **kwargs):
#         self.__count += 1
#         print(self.__count)
#
#
# c1 = Counter()
# c1()
# c1()
# c1()

# ==========================================


# def string_strip(chars):
#     def wrap(string):
#         if not isinstance(string, str):
#             raise ValueError("Аргумент должен быть строкой")
#
#         return string.strip(chars)
#     return wrap
#
#
# s1 = string_strip("?:!.; ")
# print(s1(" Hello World! "))

# ============= то же через класс (функтор)


# class StringStrip:
#     def __init__(self, chars):
#         self.__chars = chars
#
#     def __call__(self, *args, **kwargs):
#         if not isinstance(args[0], str):
#             raise ValueError("Аргумент должен быть строкой")
#
#         return args[0].strip(self.__chars)
#
#
# s1 = StringStrip("?:!.; ")
# print(s1(" Hello World! "))

# ========================================================================
# класс как декоратор


# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self):
#         print("Перед вызовом")
#         self.fn()
#         print("после вызова")
#
#
# @MyDecorator
# def func():
#     print("text")
#
#
# func()

# ======================================================


# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, a, b):
#         res = self.fn(a, b)
#         return f"Перед вызовом\n {res} \nПосле вызова"
#
#
# @MyDecorator
# def func(a, b):
#     return a * b
#
#
# print(func(2, 5))

# ===============================================================


# class Power:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, a, b):
#         return self.fn(a, b) ** 2
#
#
# @Power
# def multiply(a, b):
#     return a * b
#
#
# print(multiply(2, 3))

# ====================================================================


# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, *args, **kwargs):
#         return f"Перед вызовом\n {self.fn(*args, **kwargs)} \nПосле вызова"
#
#
# @MyDecorator
# def func(a, b):
#     return a * b
#
#
# @MyDecorator
# def func1(a, b, c):
#     return a * b * c
#
#
# print(func(2, 5))
# print(func1(2, 5, 6))

# ==================================================================


# class MyDecorator:
#     def __init__(self, arg):
#         self.name = arg
#
#     def __call__(self, fn):
#         def wrap(*args, **kwargs):
#             print("Перед вызовом")
#             print(self.name)
#             fn(*args, **kwargs)
#             print("После вызова")
#         return wrap
#
#
# @MyDecorator("test")
# def func(a, b):
#     print(a, b)
#
#
# func(2, 5)

# ======================================================================


# class Power:
#     def __init__(self, arg):
#         self.arg = arg
#
#     def __call__(self, fn):
#         def wrapper(a, b):
#             return fn(a, b) ** self.arg
#
#         return wrapper
#
#
# @Power(2)
# def multiply(a, b):
#     return a * b
#
#
# print(multiply(2, 2))

# ========================================================================


# def dec(fn):
#     def wrap(*args, **kwargs):
#         print("*" * 20)
#         fn(*args, **kwargs)
#         print("*" * 20)
#
#     return wrap
#
#
# class Person:
#     def __init__(self, name, surname):
#         self.name = name
#         self.surname = surname
#
#     @dec
#     def info(self):
#         print(f"{self.name} {self.surname}")
#
#
# p1 = Person("Виталий", "Карасев")
# p1.info()

# ==================================================================
# Дескрипторы - один класс с гетором и сетором вместо кучи геторов и сеторов


# class ValidString:
#     def __set_name__(self, owner, name):
#         self.__name = name
#
#     def __get__(self, instance, owner):
#         return instance.__dict__[self.__name]
#
#     def __set__(self, instance, value):
#         if not isinstance(value, str):
#             raise ValueError(f"{self.__name} должно быть строкой")
#         instance.__dict__[self.__name] = value
#
#
# class Person:
#     name = ValidString()
#     surname = ValidString()
#
#     def __init__(self, name, surname):
#         self.__name = name
#         self.__surname = surname
#
#
# p = Person("Виталий", "Карасев")
# p.name = "Олег"
# print(p.name)

# ==========================================================================


# class NoNegative:
#     def __set_name__(self, owner, name):
#         self.name = name
#
#     def __set__(self, instance, value):
#         if value < 0:
#             raise ValueError("Значение должно быть положительны")
#         instance.__dict__[self.name] = value
#
#     def __get__(self, instance, owner):
#         return instance.__dict__[self.name]
#
#
# class Order:
#     price = NoNegative()
#     quantity = NoNegative()
#
#     def __init__(self, name, price, quantity):
#         self.name = name
#         self.price = price
#         self.quantity = quantity
#
#     def total(self):
#         return self.price * self.quantity
#
#
# apple_order = Order("apple", 5, 10)
# print(apple_order.total())

# ====================================================================
# мета классы


# class MyList(list):
#     def get_length(self):
#         return len(self)


# MyList = type(  # мета класс - класс, который создает другие классы
#     "MyList",
#     (list,),
#     dict(get_length=lambda self: len(self)),
# )
#
#
# lst = MyList()
# lst.append(5)
# lst.append(7)
# print(lst, lst.get_length())

# ===================================================================
# создание своего модуля - создаем отдельный документ пайтона и через импорт к нему обращаемся
# import geometry.Recct
#
#
# r1 = geometry.Recct.Rectangle(1, 2)
# r2 = geometry.Recct.Rectangle(3, 4)
#
# s1 = geometry.Recct.Square(10)
# s2 = geometry.Recct.Square(20)
#
# t1 = geometry.Recct.Triangle(1, 2, 3)
# t2 = geometry.Recct.Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]
#
# for g in shape:
#     print(g.perimeter())

# ========== то же
# from geometry import Recct
#
#
# r1 = Recct.Rectangle(1, 2)
# r2 = Recct.Rectangle(3, 4)
#
# s1 = Recct.Square(10)
# s2 = Recct.Square(20)
#
# t1 = Recct.Triangle(1, 2, 3)
# t2 = Recct.Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]
#
# for g in shape:
#     print(g.perimeter())


# (if __name__ == '__main__':) - код под этой строкой не будет вызываться при импорте этого документа =================


# =============================================


# упаковка данных - сериализация
# распаковка данных - десериализация
# 1. модуль marshal (*.pyc) - не используется (старый)
# 2. модуль pickle - чисто пайтоновский модуль работает ток в пайтоне
# 3. модуль json
# метод dump() - сохраняет данные в открытый файл
# метод load() - считывает данные из открытого файла
# метод dumps() - сохраняет данные в строку
# метод loads() - считывает данные из строки


# import pickle


# filename = "basket.txt"
#
# shop_list = {
#     "фрукты": ["яблоко", "манго"],
#     "овощи": ["морковь", "лук"],
#     "бюджет": 1000
# }
#
# with open(filename, "wb") as f:
#     pickle.dump(shop_list, f)
#
# with open(filename, "rb") as f:
#     res = pickle.load(f)
#
# print(res)

# ===============================================================


# class Test:
#     num = 35
#     string = "hello"
#     lst = [1, 2, 3]
#     tpl = (22, 23)
#
#     def __str__(self):
#         return f"Число: {Test.num}\nСтрока: {Test.string}\nСписок: {Test.lst}\nКортеж: {Test.tpl}"
#
#
# obj = Test()
# # print(obj)
#
#
# my_obj = pickle.dumps(obj)
# res = pickle.loads(my_obj)
# print(res)

# =================================================================


# class Test2:
#     def __init__(self):
#         self.a = 35
#         self.b = "test"
#         self.c = lambda x: x * x
#
#     def __str__(self):
#         return f"{self.a} {self.b} {self.c(2)}"
#
#     def __getstate__(self):
#         attr = self.__dict__.copy()
#         del attr['c']
#         return attr
#
#     def __setstate__(self, state):
#         self.__dict__ = state
#         self.c = lambda x: x * x
#
#
# item1 = Test2()
# item2 = pickle.dumps(item1)
# item3 = pickle.loads(item2)
#
# print(item3.__dict__)
# print(item1)

# ===============================================================================
# 01.06.25
#
#
# import json
#
# data = {
#     'name': 'Olga',
#     'age': 35,
#     20: None,
#     True: 1,
#     'hobbies': ('running', 'singing'),
#     'children': [
#         {
#             'firstName': 'Alice',
#             'age': 6
#         }
#     ]
# }

# with open("data_file.json", "w") as f:
#     json.dump(data, f, indent=4)
#
# with open("data_file.json") as f:
#     data1 = json.load(f)
#
# print(data1)

# json_string = json.dumps(data, ensure_ascii=False)  # ensure_ascii=False - что б не было битой кодировки
# print(json_string)
# res = json.loads(json_string)
# print(res)

# ===============================================================================
# import json
# from random import choice
#
#
# def gen_person():
#     name = ''
#     tel = ''
#
#     letters = ['a', 'b', 'c', 'd', 'f', 'g', 'h', 'e', 'k', 'l', 'm', 'n']
#     num = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
#
#     while len(name) != 7:
#         name += choice(letters)
#
#     while len(tel) != 10:
#         tel += choice(num)
#
#     person = {
#         'name': name,
#         'tel': tel
#     }
#     return person
#
#
# def write_json(person_dict):
#     try:
#         data = json.load(open('persons.json'))
#     except FileNotFoundError:
#         data = []
#
#     data.append(person_dict)
#     with open('persons.json', 'w') as f:
#         json.dump(data, f, indent=2)
#
#
# for i in range(5):
#     write_json(gen_person())

# ======================================================================================


# class Student:
#     def __init__(self, name, marks):
#         self.name = name
#         self.marks = marks
#
#     def __str__(self):
#         # st = ''
#         # for i in self.marks:
#         #     st += str(i) + ', '
#         #
#         # return f"Студент: {self.name}: {st[:-2]}"
#         # ==== то же самое:
#         # st = ", ".join(map(str, self.marks))
#         # return f"Студент: {self.name}: {st}"
#         # то же самое:
#         return f"Студент: {self.name}: {", ".join(map(str, self.marks))}"
#
#     def add_mark(self, mark):
#         self.marks.append(mark)
#
#     def delete_mark(self, index):
#         self.marks.pop(index)
#
#     def edit_mark(self, index, new_marks):
#         self.marks[index] = new_marks
#
#     def average_marks(self):
#         return sum(self.marks) / len(self.marks)
#
#     def get_file_name(self):
#         return self.name + ".json"
#
#     def dump_to_json(self):
#         data = {"name": self.name, 'marks': self.marks}
#         with open(self.get_file_name(), "w") as f:
#             json.dump(data, f)
#
#     def load_from_file(self):
#         with open(self.get_file_name(), "r") as f:
#             print(json.load(f))
#
#
# class Group:
#     def __init__(self, students, group):
#         self.students = students
#         self.group = group
#
#     def __str__(self):
#         st = "\n".join(map(str, self.students))
#         return f"Группа: {self.group}\n{st}"
#
#     def add_student(self, student):
#         self.students.append(student)
#
#     def remove_student(self, index):
#         return self.students.pop(index)
#
#     @staticmethod
#     def change_group(gr1, gr2, index):
#         st = gr1.remove_student(index)
#         gr2.add_student(st)
#
#     def get_file_name(self):
#         return self.group.lower().replace(" ", "-") + ".json"
#
#     def dump_to_json(self):
#         data = [{"name": student.name, 'marks': student.marks} for student in self.students]
#         with open(self.get_file_name(), "w") as f:
#             json.dump(data, f, indent=2)
#
#     def load_from_file(self):
#         with open(self.get_file_name(), "r") as f:
#             print(json.load(f))
#
#
# st1 = Student("Bodnya", [5, 4, 3, 4, 5, 3])
# st2 = Student("Nikolaenko", [2, 3, 5, 4, 2])
# st3 = Student("Birukov", [3, 5, 3, 2, 5, 4])
# # print(st1)
# # print(st2)
# sts1 = [st1, st2]
# group1 = Group(sts1, "ГК Python")
# group1.remove_student(1)
# # print(group1)
# print()
# group1.add_student(st3)
# print(group1)
# sts2 = [st2]
# group2 = Group(sts2, "ГК Web")
# print(group2)
# group2.dump_to_json()
# group2.load_from_file()
# st1.add_mark(5)
# st1.delete_mark(2)
# st1.edit_mark(4, 4)
# print(st1)
# print(st1.average_marks())
# print(st2)
# print(st2.average_marks())
# st1.dump_to_json()
# st1.load_from_file()
# st2.dump_to_json()
# st2.load_from_file()

# ==============================================================================


# import json
#
#
# class CountryCapital:
#     @staticmethod
#     def load(file_name):
#         try:
#             data = json.load(open(file_name))
#         except FileNotFoundError:
#             data = {}
#
#         finally:
#             return data
#
#     @staticmethod
#     def add_country(file_name):
#         new_country = input("Введите название страны: ").lower()
#         new_capital = input("Введите название столицы: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         data[new_country] = new_capital
#
#         with open(file_name, "w") as f:
#             json.dump(data, f)
#
#     @staticmethod
#     def load_from_country(file_name):
#         with open(file_name) as f:
#             print({k.capitalize(): v.capitalize() for k, v in json.load(f).items()})
#
#     @staticmethod
#     def delete_country(file_name):
#         del_country = input("Введите название страны: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if del_country in data:
#             del data[del_country]
#
#             with open(file_name, "w") as f:
#                 json.dump(data, f)
#         else:
#             print("Такой страны в базе нет")
#
#     @staticmethod
#     def search_data(file_name):
#         country = input("Введите название страны: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if country in data:
#             print(f"Страна {country.capitalize()} столица {data[country].capitalize()} есть в словаре")
#         else:
#             print(f"Страна {country.capitalize()} нет в словаре")
#
#     @staticmethod
#     def edit_data(file_name):
#         country = input("Введите страну для корректировки: ").lower()
#         new_capital = input("Введите новое название столицы: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if country in data:
#             data[country] = new_capital
#             with open(file_name, "w") as f:
#                 json.dump(data, f)
#         else:
#             print("Такой страны в базе нет")
#
#
# file = "list_capital.json"
# while True:
#     index = input("Выбор действия:\n1 - добавление данных\n2 - удаление данных\n3 - поиск данных"
#                   "\n4 - редактирование данных\n5 - просмотр данных\n6 - завершение работы\nВвод: ")
#     if index == "1":
#         CountryCapital.add_country(file)
#     elif index == "2":
#         CountryCapital.delete_country(file)
#     elif index == "3":
#         CountryCapital.search_data(file)
#     elif index == "4":
#         CountryCapital.edit_data(file)
#     elif index == "5":
#         CountryCapital.load_from_country(file)
#     elif index == "6":
#         break
#     else:
#         print("Введен некорректный номер")
